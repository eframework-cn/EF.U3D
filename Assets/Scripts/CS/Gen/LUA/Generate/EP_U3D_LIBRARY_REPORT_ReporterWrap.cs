//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EP_U3D_LIBRARY_REPORT_ReporterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EP.U3D.LIBRARY.REPORT.Reporter), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetCellCount", GetCellCount);
		L.RegFunction("SetCellData", SetCellData);
		L.RegFunction("SaveVerbose", SaveVerbose);
		L.RegFunction("CommitVerbose", CommitVerbose);
		L.RegFunction("CommitException", CommitException);
		L.RegFunction("Commit", Commit);
		L.RegFunction("OpenPanel", OpenPanel);
		L.RegFunction("ClosePanel", ClosePanel);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Content", get_Content, set_Content);
		L.RegVar("Status", get_Status, set_Status);
		L.RegVar("Instance", get_Instance, set_Instance);
		L.RegVar("NumOfLogs", get_NumOfLogs, set_NumOfLogs);
		L.RegVar("NumOfWarnings", get_NumOfWarnings, set_NumOfWarnings);
		L.RegVar("LogsMemUsage", get_LogsMemUsage, set_LogsMemUsage);
		L.RegVar("GraphMemUsage", get_GraphMemUsage, set_GraphMemUsage);
		L.RegVar("GcMemUsage", get_GcMemUsage, set_GcMemUsage);
		L.RegVar("Scene", get_Scene, set_Scene);
		L.RegVar("DeviceModel", get_DeviceModel, set_DeviceModel);
		L.RegVar("DeviceType", get_DeviceType, set_DeviceType);
		L.RegVar("DeviceName", get_DeviceName, set_DeviceName);
		L.RegVar("GraphicsMemorySize", get_GraphicsMemorySize, set_GraphicsMemorySize);
		L.RegVar("MaxTextureSize", get_MaxTextureSize, set_MaxTextureSize);
		L.RegVar("SystemMemorySize", get_SystemMemorySize, set_SystemMemorySize);
		L.RegVar("ExceptionFile", get_ExceptionFile, set_ExceptionFile);
		L.RegVar("VerboseFile", get_VerboseFile, set_VerboseFile);
		L.RegVar("NumOfErrors", get_NumOfErrors, set_NumOfErrors);
		L.RegVar("Fps", get_Fps, set_Fps);
		L.RegVar("Latency", get_Latency, set_Latency);
		L.RegVar("UserData", get_UserData, set_UserData);
		L.RegVar("OnException", get_OnException, set_OnException);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCellCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)ToLua.CheckObject<EP.U3D.LIBRARY.REPORT.Reporter>(L, 1);
			int o = obj.GetCellCount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCellData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)ToLua.CheckObject<EP.U3D.LIBRARY.REPORT.Reporter>(L, 1);
			UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.CheckObject(L, 2, typeof(UnityEngine.RectTransform));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetCellData(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveVerbose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)ToLua.CheckObject<EP.U3D.LIBRARY.REPORT.Reporter>(L, 1);
			obj.SaveVerbose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CommitVerbose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)ToLua.CheckObject<EP.U3D.LIBRARY.REPORT.Reporter>(L, 1);
			obj.CommitVerbose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CommitException(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)ToLua.CheckObject<EP.U3D.LIBRARY.REPORT.Reporter>(L, 1);
			obj.CommitException();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Commit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)ToLua.CheckObject<EP.U3D.LIBRARY.REPORT.Reporter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			obj.Commit(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenPanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)ToLua.CheckObject<EP.U3D.LIBRARY.REPORT.Reporter>(L, 1);
			obj.OpenPanel();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClosePanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)ToLua.CheckObject<EP.U3D.LIBRARY.REPORT.Reporter>(L, 1);
			obj.ClosePanel();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Content(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			UnityEngine.GameObject ret = obj.Content;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Content on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Status(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			UnityEngine.GameObject ret = obj.Status;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Status on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, EP.U3D.LIBRARY.REPORT.Reporter.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NumOfLogs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			int ret = obj.NumOfLogs;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NumOfLogs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NumOfWarnings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			int ret = obj.NumOfWarnings;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NumOfWarnings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogsMemUsage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			long ret = obj.LogsMemUsage;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LogsMemUsage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GraphMemUsage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			long ret = obj.GraphMemUsage;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GraphMemUsage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GcMemUsage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			long ret = obj.GcMemUsage;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GcMemUsage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Scene(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string ret = obj.Scene;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Scene on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeviceModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string ret = obj.DeviceModel;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DeviceModel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeviceType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string ret = obj.DeviceType;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DeviceType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeviceName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string ret = obj.DeviceName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DeviceName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GraphicsMemorySize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string ret = obj.GraphicsMemorySize;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GraphicsMemorySize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxTextureSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string ret = obj.MaxTextureSize;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxTextureSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SystemMemorySize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string ret = obj.SystemMemorySize;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SystemMemorySize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExceptionFile(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string ret = obj.ExceptionFile;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ExceptionFile on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VerboseFile(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string ret = obj.VerboseFile;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index VerboseFile on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NumOfErrors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			int ret = obj.NumOfErrors;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NumOfErrors on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Fps(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			int ret = obj.Fps;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Fps on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Latency(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			long ret = obj.Latency;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Latency on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UserData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string ret = obj.UserData;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UserData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnException(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<string,bool>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Content(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.Content = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Content on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Status(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.Status = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Status on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Instance(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.REPORT.Reporter arg0 = (EP.U3D.LIBRARY.REPORT.Reporter)ToLua.CheckObject<EP.U3D.LIBRARY.REPORT.Reporter>(L, 2);
			EP.U3D.LIBRARY.REPORT.Reporter.Instance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NumOfLogs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.NumOfLogs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NumOfLogs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NumOfWarnings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.NumOfWarnings = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NumOfWarnings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LogsMemUsage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.LogsMemUsage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LogsMemUsage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GraphMemUsage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.GraphMemUsage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GraphMemUsage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GcMemUsage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.GcMemUsage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GcMemUsage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Scene(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Scene = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Scene on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DeviceModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.DeviceModel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DeviceModel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DeviceType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.DeviceType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DeviceType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DeviceName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.DeviceName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DeviceName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GraphicsMemorySize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.GraphicsMemorySize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GraphicsMemorySize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxTextureSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.MaxTextureSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxTextureSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SystemMemorySize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.SystemMemorySize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SystemMemorySize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ExceptionFile(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ExceptionFile = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ExceptionFile on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_VerboseFile(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.VerboseFile = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index VerboseFile on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NumOfErrors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.NumOfErrors = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NumOfErrors on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Fps(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Fps = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Fps on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Latency(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.Latency = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Latency on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UserData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.UserData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UserData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnException(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.REPORT.Reporter obj = (EP.U3D.LIBRARY.REPORT.Reporter)ToLua.CheckObject(L, 1, typeof(EP.U3D.LIBRARY.REPORT.Reporter));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.REPORT.Reporter.OnException' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.REPORT.Reporter'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<string,bool> ev = (System.Action<string,bool>)arg0.func;
				obj.OnException += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<string,bool> ev = (System.Action<string,bool>)arg0.func;
				obj.OnException -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

