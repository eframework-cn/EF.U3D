//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_GUIWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.GUI), typeof(System.Object));
		L.RegFunction("SetNextControlName", SetNextControlName);
		L.RegFunction("GetNameOfFocusedControl", GetNameOfFocusedControl);
		L.RegFunction("FocusControl", FocusControl);
		L.RegFunction("DragWindow", DragWindow);
		L.RegFunction("BringWindowToFront", BringWindowToFront);
		L.RegFunction("BringWindowToBack", BringWindowToBack);
		L.RegFunction("FocusWindow", FocusWindow);
		L.RegFunction("UnfocusWindow", UnfocusWindow);
		L.RegFunction("Label", Label);
		L.RegFunction("DrawTexture", DrawTexture);
		L.RegFunction("DrawTextureWithTexCoords", DrawTextureWithTexCoords);
		L.RegFunction("Box", Box);
		L.RegFunction("Button", Button);
		L.RegFunction("RepeatButton", RepeatButton);
		L.RegFunction("TextField", TextField);
		L.RegFunction("PasswordField", PasswordField);
		L.RegFunction("TextArea", TextArea);
		L.RegFunction("Toggle", Toggle);
		L.RegFunction("Toolbar", Toolbar);
		L.RegFunction("SelectionGrid", SelectionGrid);
		L.RegFunction("HorizontalSlider", HorizontalSlider);
		L.RegFunction("VerticalSlider", VerticalSlider);
		L.RegFunction("Slider", Slider);
		L.RegFunction("HorizontalScrollbar", HorizontalScrollbar);
		L.RegFunction("VerticalScrollbar", VerticalScrollbar);
		L.RegFunction("BeginClip", BeginClip);
		L.RegFunction("BeginGroup", BeginGroup);
		L.RegFunction("EndGroup", EndGroup);
		L.RegFunction("EndClip", EndClip);
		L.RegFunction("BeginScrollView", BeginScrollView);
		L.RegFunction("EndScrollView", EndScrollView);
		L.RegFunction("ScrollTo", ScrollTo);
		L.RegFunction("ScrollTowards", ScrollTowards);
		L.RegFunction("Window", Window);
		L.RegFunction("ModalWindow", ModalWindow);
		L.RegFunction("New", _CreateUnityEngine_GUI);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("color", get_color, set_color);
		L.RegVar("backgroundColor", get_backgroundColor, set_backgroundColor);
		L.RegVar("contentColor", get_contentColor, set_contentColor);
		L.RegVar("changed", get_changed, set_changed);
		L.RegVar("enabled", get_enabled, set_enabled);
		L.RegVar("depth", get_depth, set_depth);
		L.RegVar("skin", get_skin, set_skin);
		L.RegVar("matrix", get_matrix, set_matrix);
		L.RegVar("tooltip", get_tooltip, set_tooltip);
		L.RegFunction("WindowFunction", UnityEngine_GUI_WindowFunction);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_GUI(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.GUI obj = new UnityEngine.GUI();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.GUI.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNextControlName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.GUI.SetNextControlName(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNameOfFocusedControl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = UnityEngine.GUI.GetNameOfFocusedControl();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FocusControl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.GUI.FocusControl(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DragWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.GUI.DragWindow();
				return 0;
			}
			else if (count == 1)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUI.DragWindow(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.DragWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BringWindowToFront(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.GUI.BringWindowToFront(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BringWindowToBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.GUI.BringWindowToBack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FocusWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.GUI.FocusWindow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnfocusWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.GUI.UnfocusWindow();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Label(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.GUI.Label(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Texture>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 2);
				UnityEngine.GUI.Label(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GUIContent>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.ToObject(L, 2);
				UnityEngine.GUI.Label(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				UnityEngine.GUI.Label(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Texture, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				UnityEngine.GUI.Label(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GUIContent, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.ToObject(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				UnityEngine.GUI.Label(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.Label");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawTexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				UnityEngine.GUI.DrawTexture(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				UnityEngine.ScaleMode arg2 = (UnityEngine.ScaleMode)ToLua.CheckObject(L, 3, typeof(UnityEngine.ScaleMode));
				UnityEngine.GUI.DrawTexture(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				UnityEngine.ScaleMode arg2 = (UnityEngine.ScaleMode)ToLua.CheckObject(L, 3, typeof(UnityEngine.ScaleMode));
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				UnityEngine.GUI.DrawTexture(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				UnityEngine.ScaleMode arg2 = (UnityEngine.ScaleMode)ToLua.CheckObject(L, 3, typeof(UnityEngine.ScaleMode));
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.GUI.DrawTexture(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 8 && TypeChecker.CheckTypes<float, float>(L, 7))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				UnityEngine.ScaleMode arg2 = (UnityEngine.ScaleMode)ToLua.CheckObject(L, 3, typeof(UnityEngine.ScaleMode));
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Color arg5 = ToLua.ToColor(L, 6);
				float arg6 = (float)LuaDLL.lua_tonumber(L, 7);
				float arg7 = (float)LuaDLL.lua_tonumber(L, 8);
				UnityEngine.GUI.DrawTexture(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else if (count == 8 && TypeChecker.CheckTypes<UnityEngine.Vector4, float>(L, 7))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				UnityEngine.ScaleMode arg2 = (UnityEngine.ScaleMode)ToLua.CheckObject(L, 3, typeof(UnityEngine.ScaleMode));
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Color arg5 = ToLua.ToColor(L, 6);
				UnityEngine.Vector4 arg6 = ToLua.ToVector4(L, 7);
				float arg7 = (float)LuaDLL.lua_tonumber(L, 8);
				UnityEngine.GUI.DrawTexture(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else if (count == 8 && TypeChecker.CheckTypes<UnityEngine.Vector4, UnityEngine.Vector4>(L, 7))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				UnityEngine.ScaleMode arg2 = (UnityEngine.ScaleMode)ToLua.CheckObject(L, 3, typeof(UnityEngine.ScaleMode));
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Color arg5 = ToLua.ToColor(L, 6);
				UnityEngine.Vector4 arg6 = ToLua.ToVector4(L, 7);
				UnityEngine.Vector4 arg7 = ToLua.ToVector4(L, 8);
				UnityEngine.GUI.DrawTexture(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.DrawTexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawTextureWithTexCoords(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				UnityEngine.Rect arg2 = StackTraits<UnityEngine.Rect>.Check(L, 3);
				UnityEngine.GUI.DrawTextureWithTexCoords(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				UnityEngine.Rect arg2 = StackTraits<UnityEngine.Rect>.Check(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				UnityEngine.GUI.DrawTextureWithTexCoords(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.DrawTextureWithTexCoords");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Box(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.GUI.Box(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Texture>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 2);
				UnityEngine.GUI.Box(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GUIContent>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.ToObject(L, 2);
				UnityEngine.GUI.Box(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				UnityEngine.GUI.Box(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Texture, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				UnityEngine.GUI.Box(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GUIContent, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.ToObject(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				UnityEngine.GUI.Box(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.Box");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Button(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				bool o = UnityEngine.GUI.Button(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Texture>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 2);
				bool o = UnityEngine.GUI.Button(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GUIContent>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.ToObject(L, 2);
				bool o = UnityEngine.GUI.Button(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				bool o = UnityEngine.GUI.Button(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Texture, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				bool o = UnityEngine.GUI.Button(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GUIContent, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.ToObject(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				bool o = UnityEngine.GUI.Button(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.Button");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RepeatButton(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				bool o = UnityEngine.GUI.RepeatButton(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Texture>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 2);
				bool o = UnityEngine.GUI.RepeatButton(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GUIContent>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.ToObject(L, 2);
				bool o = UnityEngine.GUI.RepeatButton(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				bool o = UnityEngine.GUI.RepeatButton(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Texture, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				bool o = UnityEngine.GUI.RepeatButton(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GUIContent, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.ToObject(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				bool o = UnityEngine.GUI.RepeatButton(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.RepeatButton");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TextField(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string o = UnityEngine.GUI.TextField(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				string o = UnityEngine.GUI.TextField(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GUIStyle>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				string o = UnityEngine.GUI.TextField(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.GUIStyle arg3 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 4, typeof(UnityEngine.GUIStyle));
				string o = UnityEngine.GUI.TextField(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.TextField");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PasswordField(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				char arg2 = (char)LuaDLL.luaL_checknumber(L, 3);
				string o = UnityEngine.GUI.PasswordField(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int>(L, 4))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				char arg2 = (char)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				string o = UnityEngine.GUI.PasswordField(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.GUIStyle>(L, 4))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				char arg2 = (char)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.GUIStyle arg3 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 4);
				string o = UnityEngine.GUI.PasswordField(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				char arg2 = (char)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 5, typeof(UnityEngine.GUIStyle));
				string o = UnityEngine.GUI.PasswordField(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.PasswordField");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TextArea(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string o = UnityEngine.GUI.TextArea(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				string o = UnityEngine.GUI.TextArea(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GUIStyle>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				string o = UnityEngine.GUI.TextArea(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.GUIStyle arg3 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 4, typeof(UnityEngine.GUIStyle));
				string o = UnityEngine.GUI.TextArea(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.TextArea");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Toggle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				bool o = UnityEngine.GUI.Toggle(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Texture>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				UnityEngine.Texture arg2 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				bool o = UnityEngine.GUI.Toggle(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GUIContent>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				UnityEngine.GUIContent arg2 = (UnityEngine.GUIContent)ToLua.ToObject(L, 3);
				bool o = UnityEngine.GUI.Toggle(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, UnityEngine.GUIStyle>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				UnityEngine.GUIStyle arg3 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 4);
				bool o = UnityEngine.GUI.Toggle(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Texture, UnityEngine.GUIStyle>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				UnityEngine.Texture arg2 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				UnityEngine.GUIStyle arg3 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 4);
				bool o = UnityEngine.GUI.Toggle(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.GUIContent, UnityEngine.GUIStyle>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				UnityEngine.GUIContent arg2 = (UnityEngine.GUIContent)ToLua.ToObject(L, 3);
				UnityEngine.GUIStyle arg3 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 4);
				bool o = UnityEngine.GUI.Toggle(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.GUIContent arg3 = (UnityEngine.GUIContent)ToLua.CheckObject<UnityEngine.GUIContent>(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 5, typeof(UnityEngine.GUIStyle));
				bool o = UnityEngine.GUI.Toggle(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.Toggle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Toolbar(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string[]>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string[] arg2 = ToLua.ToStringArray(L, 3);
				int o = UnityEngine.GUI.Toolbar(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Texture[]>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Texture[] arg2 = ToLua.ToObjectArray<UnityEngine.Texture>(L, 3);
				int o = UnityEngine.GUI.Toolbar(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GUIContent[]>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.GUIContent[] arg2 = ToLua.ToObjectArray<UnityEngine.GUIContent>(L, 3);
				int o = UnityEngine.GUI.Toolbar(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string[], UnityEngine.GUIStyle>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string[] arg2 = ToLua.ToStringArray(L, 3);
				UnityEngine.GUIStyle arg3 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 4);
				int o = UnityEngine.GUI.Toolbar(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Texture[], UnityEngine.GUIStyle>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Texture[] arg2 = ToLua.ToObjectArray<UnityEngine.Texture>(L, 3);
				UnityEngine.GUIStyle arg3 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 4);
				int o = UnityEngine.GUI.Toolbar(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.GUIContent[], UnityEngine.GUIStyle>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.GUIContent[] arg2 = ToLua.ToObjectArray<UnityEngine.GUIContent>(L, 3);
				UnityEngine.GUIStyle arg3 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 4);
				int o = UnityEngine.GUI.Toolbar(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.GUIContent[] arg2 = ToLua.CheckObjectArray<UnityEngine.GUIContent>(L, 3);
				UnityEngine.GUIStyle arg3 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 4, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUI.ToolbarButtonSize arg4 = (UnityEngine.GUI.ToolbarButtonSize)ToLua.CheckObject(L, 5, typeof(UnityEngine.GUI.ToolbarButtonSize));
				int o = UnityEngine.GUI.Toolbar(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.Toolbar");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SelectionGrid(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<string[], int>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string[] arg2 = ToLua.ToStringArray(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int o = UnityEngine.GUI.SelectionGrid(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Texture[], int>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Texture[] arg2 = ToLua.ToObjectArray<UnityEngine.Texture>(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int o = UnityEngine.GUI.SelectionGrid(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.GUIContent[], int>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.GUIContent[] arg2 = ToLua.ToObjectArray<UnityEngine.GUIContent>(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int o = UnityEngine.GUI.SelectionGrid(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<string[], int, UnityEngine.GUIStyle>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string[] arg2 = ToLua.ToStringArray(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				int o = UnityEngine.GUI.SelectionGrid(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Texture[], int, UnityEngine.GUIStyle>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Texture[] arg2 = ToLua.ToObjectArray<UnityEngine.Texture>(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				int o = UnityEngine.GUI.SelectionGrid(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.GUIContent[], int, UnityEngine.GUIStyle>(L, 3))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.GUIContent[] arg2 = ToLua.ToObjectArray<UnityEngine.GUIContent>(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				int o = UnityEngine.GUI.SelectionGrid(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.SelectionGrid");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HorizontalSlider(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float o = UnityEngine.GUI.HorizontalSlider(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 5, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUIStyle arg5 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 6, typeof(UnityEngine.GUIStyle));
				float o = UnityEngine.GUI.HorizontalSlider(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 5, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUIStyle arg5 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 6, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUIStyle arg6 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 7, typeof(UnityEngine.GUIStyle));
				float o = UnityEngine.GUI.HorizontalSlider(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.HorizontalSlider");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VerticalSlider(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float o = UnityEngine.GUI.VerticalSlider(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 5, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUIStyle arg5 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 6, typeof(UnityEngine.GUIStyle));
				float o = UnityEngine.GUI.VerticalSlider(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 5, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUIStyle arg5 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 6, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUIStyle arg6 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 7, typeof(UnityEngine.GUIStyle));
				float o = UnityEngine.GUI.VerticalSlider(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.VerticalSlider");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Slider(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 9)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.GUIStyle arg5 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 6, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUIStyle arg6 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 7, typeof(UnityEngine.GUIStyle));
				bool arg7 = LuaDLL.luaL_checkboolean(L, 8);
				int arg8 = (int)LuaDLL.luaL_checknumber(L, 9);
				float o = UnityEngine.GUI.Slider(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 10)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.GUIStyle arg5 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 6, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUIStyle arg6 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 7, typeof(UnityEngine.GUIStyle));
				bool arg7 = LuaDLL.luaL_checkboolean(L, 8);
				int arg8 = (int)LuaDLL.luaL_checknumber(L, 9);
				UnityEngine.GUIStyle arg9 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 10, typeof(UnityEngine.GUIStyle));
				float o = UnityEngine.GUI.Slider(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.Slider");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HorizontalScrollbar(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				float o = UnityEngine.GUI.HorizontalScrollbar(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.GUIStyle arg5 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 6, typeof(UnityEngine.GUIStyle));
				float o = UnityEngine.GUI.HorizontalScrollbar(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.HorizontalScrollbar");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VerticalScrollbar(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				float o = UnityEngine.GUI.VerticalScrollbar(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.GUIStyle arg5 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 6, typeof(UnityEngine.GUIStyle));
				float o = UnityEngine.GUI.VerticalScrollbar(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.VerticalScrollbar");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginClip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUI.BeginClip(arg0);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				UnityEngine.GUI.BeginClip(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.BeginClip");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginGroup(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUI.BeginGroup(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.GUI.BeginGroup(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Texture>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 2);
				UnityEngine.GUI.BeginGroup(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GUIContent>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.ToObject(L, 2);
				UnityEngine.GUI.BeginGroup(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUIStyle arg1 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 2);
				UnityEngine.GUI.BeginGroup(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				UnityEngine.GUI.BeginGroup(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Texture, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				UnityEngine.GUI.BeginGroup(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GUIContent, UnityEngine.GUIStyle>(L, 2))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.ToObject(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				UnityEngine.GUI.BeginGroup(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.BeginGroup");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.GUI.EndGroup();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.GUI.EndClip();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginScrollView(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Rect arg2 = StackTraits<UnityEngine.Rect>.Check(L, 3);
				UnityEngine.Vector2 o = UnityEngine.GUI.BeginScrollView(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<bool, bool>(L, 4))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Rect arg2 = StackTraits<UnityEngine.Rect>.Check(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				bool arg4 = LuaDLL.lua_toboolean(L, 5);
				UnityEngine.Vector2 o = UnityEngine.GUI.BeginScrollView(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.GUIStyle, UnityEngine.GUIStyle>(L, 4))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Rect arg2 = StackTraits<UnityEngine.Rect>.Check(L, 3);
				UnityEngine.GUIStyle arg3 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				UnityEngine.Vector2 o = UnityEngine.GUI.BeginScrollView(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Rect arg2 = StackTraits<UnityEngine.Rect>.Check(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
				UnityEngine.GUIStyle arg5 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 6, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUIStyle arg6 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 7, typeof(UnityEngine.GUIStyle));
				UnityEngine.Vector2 o = UnityEngine.GUI.BeginScrollView(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.BeginScrollView");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndScrollView(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.GUI.EndScrollView();
				return 0;
			}
			else if (count == 1)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				UnityEngine.GUI.EndScrollView(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.EndScrollView");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScrollTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
			UnityEngine.GUI.ScrollTo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScrollTowards(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			bool o = UnityEngine.GUI.ScrollTowards(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Window(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<string>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				UnityEngine.Rect o = UnityEngine.GUI.Window(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Texture>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				UnityEngine.Texture arg3 = (UnityEngine.Texture)ToLua.ToObject(L, 4);
				UnityEngine.Rect o = UnityEngine.GUI.Window(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.GUIContent>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				UnityEngine.GUIContent arg3 = (UnityEngine.GUIContent)ToLua.ToObject(L, 4);
				UnityEngine.Rect o = UnityEngine.GUI.Window(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<string, UnityEngine.GUIStyle>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				UnityEngine.Rect o = UnityEngine.GUI.Window(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Texture, UnityEngine.GUIStyle>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				UnityEngine.Texture arg3 = (UnityEngine.Texture)ToLua.ToObject(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				UnityEngine.Rect o = UnityEngine.GUI.Window(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.GUIContent, UnityEngine.GUIStyle>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				UnityEngine.GUIContent arg3 = (UnityEngine.GUIContent)ToLua.ToObject(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				UnityEngine.Rect o = UnityEngine.GUI.Window(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.Window");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ModalWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<string>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				UnityEngine.Rect o = UnityEngine.GUI.ModalWindow(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Texture>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				UnityEngine.Texture arg3 = (UnityEngine.Texture)ToLua.ToObject(L, 4);
				UnityEngine.Rect o = UnityEngine.GUI.ModalWindow(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.GUIContent>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				UnityEngine.GUIContent arg3 = (UnityEngine.GUIContent)ToLua.ToObject(L, 4);
				UnityEngine.Rect o = UnityEngine.GUI.ModalWindow(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<string, UnityEngine.GUIStyle>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				UnityEngine.Rect o = UnityEngine.GUI.ModalWindow(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Texture, UnityEngine.GUIStyle>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				UnityEngine.Texture arg3 = (UnityEngine.Texture)ToLua.ToObject(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				UnityEngine.Rect o = UnityEngine.GUI.ModalWindow(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.GUIContent, UnityEngine.GUIStyle>(L, 4))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				UnityEngine.GUI.WindowFunction arg2 = (UnityEngine.GUI.WindowFunction)ToLua.CheckDelegate<UnityEngine.GUI.WindowFunction>(L, 3);
				UnityEngine.GUIContent arg3 = (UnityEngine.GUIContent)ToLua.ToObject(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				UnityEngine.Rect o = UnityEngine.GUI.ModalWindow(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUI.ModalWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.GUI.color);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_backgroundColor(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.GUI.backgroundColor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_contentColor(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.GUI.contentColor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_changed(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.GUI.changed);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enabled(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.GUI.enabled);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_depth(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.GUI.depth);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skin(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UnityEngine.GUI.skin);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_matrix(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, UnityEngine.GUI.matrix);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tooltip(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UnityEngine.GUI.tooltip);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			UnityEngine.GUI.color = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_backgroundColor(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			UnityEngine.GUI.backgroundColor = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_contentColor(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			UnityEngine.GUI.contentColor = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_changed(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.GUI.changed = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enabled(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.GUI.enabled = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_depth(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.GUI.depth = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skin(IntPtr L)
	{
		try
		{
			UnityEngine.GUISkin arg0 = (UnityEngine.GUISkin)ToLua.CheckObject(L, 2, typeof(UnityEngine.GUISkin));
			UnityEngine.GUI.skin = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_matrix(IntPtr L)
	{
		try
		{
			UnityEngine.Matrix4x4 arg0 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 2);
			UnityEngine.GUI.matrix = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tooltip(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GUI.tooltip = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_GUI_WindowFunction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UnityEngine.GUI.WindowFunction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UnityEngine.GUI.WindowFunction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

