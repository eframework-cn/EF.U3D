//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EP_U3D_LIBRARY_AUDIO_AudioManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EP.U3D.LIBRARY.AUDIO.AudioManager), typeof(System.Object));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("PlayMusic", PlayMusic);
		L.RegFunction("StopMusic", StopMusic);
		L.RegFunction("PauseMusic", PauseMusic);
		L.RegFunction("UnpauseMusic", UnpauseMusic);
		L.RegFunction("PlaySound", PlaySound);
		L.RegFunction("StopSound", StopSound);
		L.RegFunction("PauseAll", PauseAll);
		L.RegFunction("UnpauseAll", UnpauseAll);
		L.RegFunction("SetCategoryVolume", SetCategoryVolume);
		L.RegFunction("IsPlaylistPlaying", IsPlaylistPlaying);
		L.RegFunction("New", _CreateEP_U3D_LIBRARY_AUDIO_AudioManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("MuteSound", get_MuteSound, set_MuteSound);
		L.RegVar("MuteMusic", get_MuteMusic, set_MuteMusic);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEP_U3D_LIBRARY_AUDIO_AudioManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.AUDIO.AudioManager obj = new EP.U3D.LIBRARY.AUDIO.AudioManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EP.U3D.LIBRARY.AUDIO.AudioManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			EP.U3D.LIBRARY.AUDIO.AudioManager.Initialize(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayMusic(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string[] arg0 = ToLua.CheckStringArray(L, 1);
				EP.U3D.LIBRARY.AUDIO.AudioManager.PlayMusic(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string[] arg0 = ToLua.CheckStringArray(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				EP.U3D.LIBRARY.AUDIO.AudioManager.PlayMusic(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string[] arg0 = ToLua.CheckStringArray(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				EP.U3D.LIBRARY.AUDIO.AudioManager.PlayMusic(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				string[] arg0 = ToLua.CheckStringArray(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				EP.U3D.LIBRARY.AUDIO.AudioManager.PlayMusic(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.AUDIO.AudioManager.PlayMusic");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopMusic(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.AUDIO.AudioManager.StopMusic();
				return 0;
			}
			else if (count == 1)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.AUDIO.AudioManager.StopMusic(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.AUDIO.AudioManager.StopMusic");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PauseMusic(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.AUDIO.AudioManager.PauseMusic();
				return 0;
			}
			else if (count == 1)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.AUDIO.AudioManager.PauseMusic(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.AUDIO.AudioManager.PauseMusic");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnpauseMusic(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.AUDIO.AudioManager.UnpauseMusic();
				return 0;
			}
			else if (count == 1)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.AUDIO.AudioManager.UnpauseMusic(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.AUDIO.AudioManager.UnpauseMusic");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlaySound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				EP.U3D.LIBRARY.AUDIO.AudioObject o = EP.U3D.LIBRARY.AUDIO.AudioManager.PlaySound(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<float>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				EP.U3D.LIBRARY.AUDIO.AudioObject o = EP.U3D.LIBRARY.AUDIO.AudioManager.PlaySound(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				EP.U3D.LIBRARY.AUDIO.AudioObject o = EP.U3D.LIBRARY.AUDIO.AudioManager.PlaySound(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Transform arg2 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 3);
				EP.U3D.LIBRARY.AUDIO.AudioObject o = EP.U3D.LIBRARY.AUDIO.AudioManager.PlaySound(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Transform arg2 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				EP.U3D.LIBRARY.AUDIO.AudioObject o = EP.U3D.LIBRARY.AUDIO.AudioManager.PlaySound(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.AUDIO.AudioManager.PlaySound");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopSound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				EP.U3D.LIBRARY.AUDIO.AudioManager.StopSound(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.AUDIO.AudioObject>(L, 1))
			{
				EP.U3D.LIBRARY.AUDIO.AudioObject arg0 = (EP.U3D.LIBRARY.AUDIO.AudioObject)ToLua.ToObject(L, 1);
				EP.U3D.LIBRARY.AUDIO.AudioManager.StopSound(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, float>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				EP.U3D.LIBRARY.AUDIO.AudioManager.StopSound(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.AUDIO.AudioObject, float>(L, 1))
			{
				EP.U3D.LIBRARY.AUDIO.AudioObject arg0 = (EP.U3D.LIBRARY.AUDIO.AudioObject)ToLua.ToObject(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				EP.U3D.LIBRARY.AUDIO.AudioManager.StopSound(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.AUDIO.AudioManager.StopSound");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PauseAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.AUDIO.AudioManager.PauseAll();
				return 0;
			}
			else if (count == 1)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.AUDIO.AudioManager.PauseAll(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.AUDIO.AudioManager.PauseAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnpauseAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.AUDIO.AudioManager.UnpauseAll();
				return 0;
			}
			else if (count == 1)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.AUDIO.AudioManager.UnpauseAll(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.AUDIO.AudioManager.UnpauseAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCategoryVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			EP.U3D.LIBRARY.AUDIO.AudioManager.SetCategoryVolume(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPlaylistPlaying(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = EP.U3D.LIBRARY.AUDIO.AudioManager.IsPlaylistPlaying();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MuteSound(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, EP.U3D.LIBRARY.AUDIO.AudioManager.MuteSound);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MuteMusic(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, EP.U3D.LIBRARY.AUDIO.AudioManager.MuteMusic);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MuteSound(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			EP.U3D.LIBRARY.AUDIO.AudioManager.MuteSound = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MuteMusic(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			EP.U3D.LIBRARY.AUDIO.AudioManager.MuteMusic = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

