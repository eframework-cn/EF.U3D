//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EP_U3D_LIBRARY_NET_NetManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EP.U3D.LIBRARY.NET.NetManager), typeof(System.Object));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("FlushInput", FlushInput);
		L.RegFunction("FlushOutput", FlushOutput);
		L.RegFunction("ConnectTo", ConnectTo);
		L.RegFunction("DisconnectFrom", DisconnectFrom);
		L.RegFunction("GetConnection", GetConnection);
		L.RegFunction("DisconnectAll", DisconnectAll);
		L.RegFunction("RegMsg", RegMsg);
		L.RegFunction("UnregMsg", UnregMsg);
		L.RegFunction("NotifyMsg", NotifyMsg);
		L.RegFunction("SendMsg", SendMsg);
		L.RegFunction("EncodeMsg", EncodeMsg);
		L.RegFunction("DecodeMsg", DecodeMsg);
		L.RegFunction("DecodePB", DecodePB);
		L.RegFunction("EncodePB", EncodePB);
		L.RegFunction("DecodeJson", DecodeJson);
		L.RegFunction("EncodeJson", EncodeJson);
		L.RegFunction("SendCgi", SendCgi);
		L.RegFunction("New", _CreateEP_U3D_LIBRARY_NET_NetManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEP_U3D_LIBRARY_NET_NetManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.NET.NetManager obj = new EP.U3D.LIBRARY.NET.NetManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EP.U3D.LIBRARY.NET.NetManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			EP.U3D.LIBRARY.NET.NetManager.Initialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			EP.U3D.LIBRARY.NET.NetManager.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlushInput(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			EP.U3D.LIBRARY.NET.NetManager.FlushInput();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlushOutput(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			EP.U3D.LIBRARY.NET.NetManager.FlushOutput();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.ConnectTo(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.ConnectTo(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.ConnectTo(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.ConnectTo(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 7)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.ConnectTo(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 8)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.ConnectTo(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 9)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg8 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 9);
				EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.ConnectTo(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 10)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg8 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 9);
				int arg9 = (int)LuaDLL.luaL_checknumber(L, 10);
				EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.ConnectTo(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 11)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg8 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 9);
				int arg9 = (int)LuaDLL.luaL_checknumber(L, 10);
				int arg10 = (int)LuaDLL.luaL_checknumber(L, 11);
				EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.ConnectTo(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 12)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg8 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 9);
				int arg9 = (int)LuaDLL.luaL_checknumber(L, 10);
				int arg10 = (int)LuaDLL.luaL_checknumber(L, 11);
				int arg11 = (int)LuaDLL.luaL_checknumber(L, 12);
				EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.ConnectTo(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 13)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg8 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 9);
				int arg9 = (int)LuaDLL.luaL_checknumber(L, 10);
				int arg10 = (int)LuaDLL.luaL_checknumber(L, 11);
				int arg11 = (int)LuaDLL.luaL_checknumber(L, 12);
				System.Func<EP.U3D.LIBRARY.POOL.StreamBuffer> arg12 = (System.Func<EP.U3D.LIBRARY.POOL.StreamBuffer>)ToLua.CheckDelegate<System.Func<EP.U3D.LIBRARY.POOL.StreamBuffer>>(L, 13);
				EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.ConnectTo(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.NET.NetManager.ConnectTo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisconnectFrom(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			EP.U3D.LIBRARY.NET.NetManager.DisconnectFrom(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection o = EP.U3D.LIBRARY.NET.NetManager.GetConnection(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisconnectAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			EP.U3D.LIBRARY.NET.NetManager.DisconnectAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegMsg(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.EVT.EventHandlerDelegate arg1 = (EP.U3D.LIBRARY.EVT.EventHandlerDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.EVT.EventHandlerDelegate>(L, 2);
				EP.U3D.LIBRARY.NET.NetManager.RegMsg(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.EVT.EventHandlerDelegate arg1 = (EP.U3D.LIBRARY.EVT.EventHandlerDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.EVT.EventHandlerDelegate>(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				EP.U3D.LIBRARY.NET.NetManager.RegMsg(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.EVT.EventHandlerDelegate arg1 = (EP.U3D.LIBRARY.EVT.EventHandlerDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.EVT.EventHandlerDelegate>(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				EP.U3D.LIBRARY.NET.NetManager.RegMsg(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.NET.NetManager.RegMsg");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnregMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			EP.U3D.LIBRARY.EVT.EventHandlerDelegate arg1 = (EP.U3D.LIBRARY.EVT.EventHandlerDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.EVT.EventHandlerDelegate>(L, 2);
			EP.U3D.LIBRARY.NET.NetManager.UnregMsg(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NotifyMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.EVT.Evt arg0 = (EP.U3D.LIBRARY.EVT.Evt)ToLua.CheckObject<EP.U3D.LIBRARY.EVT.Evt>(L, 1);
			EP.U3D.LIBRARY.NET.NetManager.NotifyMsg(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMsg(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.NET.NetManager.SendMsg(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.PROTO.IProto>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.ToObject(L, 2);
				EP.U3D.LIBRARY.NET.NetManager.SendMsg(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				EP.U3D.LIBRARY.NET.NetManager.SendMsg(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.PROTO.IProto, int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.ToObject(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				EP.U3D.LIBRARY.NET.NetManager.SendMsg(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<byte[], int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				EP.U3D.LIBRARY.NET.NetManager.SendMsg(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.PROTO.IProto, int, int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.ToObject(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				EP.U3D.LIBRARY.NET.NetManager.SendMsg(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[], int, int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				EP.U3D.LIBRARY.NET.NetManager.SendMsg(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.PROTO.IProto, int, int, int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.ToObject(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				EP.U3D.LIBRARY.NET.NetManager.SendMsg(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<byte[], int, int, int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				EP.U3D.LIBRARY.NET.NetManager.SendMsg(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.NET.NetManager.SendMsg");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncodeMsg(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer o = EP.U3D.LIBRARY.NET.NetManager.EncodeMsg(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.CheckObject<EP.U3D.LIBRARY.PROTO.IProto>(L, 2);
				EP.U3D.LIBRARY.POOL.StreamBuffer o = EP.U3D.LIBRARY.NET.NetManager.EncodeMsg(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.CheckObject<EP.U3D.LIBRARY.PROTO.IProto>(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				EP.U3D.LIBRARY.POOL.StreamBuffer o = EP.U3D.LIBRARY.NET.NetManager.EncodeMsg(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 4)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.CheckObject<EP.U3D.LIBRARY.PROTO.IProto>(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				EP.U3D.LIBRARY.POOL.StreamBuffer o = EP.U3D.LIBRARY.NET.NetManager.EncodeMsg(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.NET.NetManager.EncodeMsg");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecodeMsg(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.POOL.StreamBuffer>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer arg1 = (EP.U3D.LIBRARY.POOL.StreamBuffer)ToLua.ToObject(L, 2);
				EP.U3D.LIBRARY.PROTO.IProto o = EP.U3D.LIBRARY.NET.NetManager.DecodeMsg(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				EP.U3D.LIBRARY.PROTO.IProto o = EP.U3D.LIBRARY.NET.NetManager.DecodeMsg(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.POOL.StreamBuffer, int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer arg1 = (EP.U3D.LIBRARY.POOL.StreamBuffer)ToLua.ToObject(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				EP.U3D.LIBRARY.PROTO.IProto o = EP.U3D.LIBRARY.NET.NetManager.DecodeMsg(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<byte[], int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				EP.U3D.LIBRARY.PROTO.IProto o = EP.U3D.LIBRARY.NET.NetManager.DecodeMsg(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.NET.NetManager.DecodeMsg");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecodePB(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer arg1 = (EP.U3D.LIBRARY.POOL.StreamBuffer)ToLua.CheckObject(L, 2, typeof(EP.U3D.LIBRARY.POOL.StreamBuffer));
				EP.U3D.LIBRARY.PROTO.IProto o = EP.U3D.LIBRARY.NET.NetManager.DecodePB(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer arg1 = (EP.U3D.LIBRARY.POOL.StreamBuffer)ToLua.CheckObject(L, 2, typeof(EP.U3D.LIBRARY.POOL.StreamBuffer));
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				EP.U3D.LIBRARY.PROTO.IProto o = EP.U3D.LIBRARY.NET.NetManager.DecodePB(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.NET.NetManager.DecodePB");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncodePB(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				EP.U3D.LIBRARY.PROTO.IProto arg0 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.CheckObject<EP.U3D.LIBRARY.PROTO.IProto>(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer o = EP.U3D.LIBRARY.NET.NetManager.EncodePB(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				EP.U3D.LIBRARY.PROTO.IProto arg0 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.CheckObject<EP.U3D.LIBRARY.PROTO.IProto>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				EP.U3D.LIBRARY.POOL.StreamBuffer o = EP.U3D.LIBRARY.NET.NetManager.EncodePB(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.NET.NetManager.EncodePB");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecodeJson(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Type arg1 = ToLua.CheckMonoType(L, 2);
			object o = EP.U3D.LIBRARY.NET.NetManager.DecodeJson(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncodeJson(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			string o = EP.U3D.LIBRARY.NET.NetManager.EncodeJson(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendCgi(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.NET.NetManager.SendCgi(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.PROTO.IProto>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.ToObject(L, 2);
				EP.U3D.LIBRARY.NET.NetManager.SendCgi(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.POOL.StreamBuffer>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer arg1 = (EP.U3D.LIBRARY.POOL.StreamBuffer)ToLua.ToObject(L, 2);
				EP.U3D.LIBRARY.NET.NetManager.SendCgi(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.PROTO.IProto, System.Action<string,byte[]>>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.ToObject(L, 2);
				System.Action<string,byte[]> arg2 = (System.Action<string,byte[]>)ToLua.ToObject(L, 3);
				EP.U3D.LIBRARY.NET.NetManager.SendCgi(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.POOL.StreamBuffer, System.Action<string,byte[]>>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer arg1 = (EP.U3D.LIBRARY.POOL.StreamBuffer)ToLua.ToObject(L, 2);
				System.Action<string,byte[]> arg2 = (System.Action<string,byte[]>)ToLua.ToObject(L, 3);
				EP.U3D.LIBRARY.NET.NetManager.SendCgi(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.PROTO.IProto, System.Action<string,byte[]>, int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.ToObject(L, 2);
				System.Action<string,byte[]> arg2 = (System.Action<string,byte[]>)ToLua.ToObject(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				EP.U3D.LIBRARY.NET.NetManager.SendCgi(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.POOL.StreamBuffer, System.Action<string,byte[]>, int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer arg1 = (EP.U3D.LIBRARY.POOL.StreamBuffer)ToLua.ToObject(L, 2);
				System.Action<string,byte[]> arg2 = (System.Action<string,byte[]>)ToLua.ToObject(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				EP.U3D.LIBRARY.NET.NetManager.SendCgi(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.PROTO.IProto, System.Action<string,byte[]>, int, int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.ToObject(L, 2);
				System.Action<string,byte[]> arg2 = (System.Action<string,byte[]>)ToLua.ToObject(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				EP.U3D.LIBRARY.NET.NetManager.SendCgi(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.POOL.StreamBuffer, System.Action<string,byte[]>, int, int>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer arg1 = (EP.U3D.LIBRARY.POOL.StreamBuffer)ToLua.ToObject(L, 2);
				System.Action<string,byte[]> arg2 = (System.Action<string,byte[]>)ToLua.ToObject(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				EP.U3D.LIBRARY.NET.NetManager.SendCgi(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.PROTO.IProto, System.Action<string,byte[]>, int, int, string>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.PROTO.IProto arg1 = (EP.U3D.LIBRARY.PROTO.IProto)ToLua.ToObject(L, 2);
				System.Action<string,byte[]> arg2 = (System.Action<string,byte[]>)ToLua.ToObject(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				string arg5 = ToLua.ToString(L, 6);
				EP.U3D.LIBRARY.NET.NetManager.SendCgi(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.POOL.StreamBuffer, System.Action<string,byte[]>, int, int, string>(L, 2))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer arg1 = (EP.U3D.LIBRARY.POOL.StreamBuffer)ToLua.ToObject(L, 2);
				System.Action<string,byte[]> arg2 = (System.Action<string,byte[]>)ToLua.ToObject(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				string arg5 = ToLua.ToString(L, 6);
				EP.U3D.LIBRARY.NET.NetManager.SendCgi(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.NET.NetManager.SendCgi");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

