//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EP_U3D_LIBRARY_ASSET_AssetManager_HandlerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EP.U3D.LIBRARY.ASSET.AssetManager.Handler), typeof(System.Object));
		L.RegFunction("DoWillLoad", DoWillLoad);
		L.RegFunction("DoAfterLoad", DoAfterLoad);
		L.RegFunction("MoveNext", MoveNext);
		L.RegFunction("Reset", Reset);
		L.RegFunction("New", _CreateEP_U3D_LIBRARY_ASSET_AssetManager_Handler);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("DoneCount", get_DoneCount, set_DoneCount);
		L.RegVar("TotalCount", get_TotalCount, set_TotalCount);
		L.RegVar("Operation", get_Operation, set_Operation);
		L.RegVar("Progress", get_Progress, null);
		L.RegVar("Current", get_Current, null);
		L.RegVar("WillLoad", get_WillLoad, set_WillLoad);
		L.RegVar("AfterLoad", get_AfterLoad, set_AfterLoad);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEP_U3D_LIBRARY_ASSET_AssetManager_Handler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = new EP.U3D.LIBRARY.ASSET.AssetManager.Handler();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EP.U3D.LIBRARY.ASSET.AssetManager.Handler.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoWillLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)ToLua.CheckObject<EP.U3D.LIBRARY.ASSET.AssetManager.Handler>(L, 1);
			obj.DoWillLoad();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoAfterLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)ToLua.CheckObject<EP.U3D.LIBRARY.ASSET.AssetManager.Handler>(L, 1);
			obj.DoAfterLoad();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveNext(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)ToLua.CheckObject<EP.U3D.LIBRARY.ASSET.AssetManager.Handler>(L, 1);
			bool o = obj.MoveNext();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)ToLua.CheckObject<EP.U3D.LIBRARY.ASSET.AssetManager.Handler>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DoneCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)o;
			int ret = obj.DoneCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DoneCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)o;
			int ret = obj.TotalCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Operation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)o;
			UnityEngine.AsyncOperation ret = obj.Operation;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Operation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Progress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)o;
			float ret = obj.Progress;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Progress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Current(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)o;
			object ret = obj.Current;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Current on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WillLoad(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AfterLoad(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DoneCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.DoneCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DoneCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TotalCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.TotalCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Operation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)o;
			UnityEngine.AsyncOperation arg0 = (UnityEngine.AsyncOperation)ToLua.CheckObject<UnityEngine.AsyncOperation>(L, 2);
			obj.Operation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Operation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WillLoad(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)ToLua.CheckObject(L, 1, typeof(EP.U3D.LIBRARY.ASSET.AssetManager.Handler));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.ASSET.AssetManager.Handler.WillLoad' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.ASSET.AssetManager.Handler'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.WillLoad += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.WillLoad -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AfterLoad(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler obj = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)ToLua.CheckObject(L, 1, typeof(EP.U3D.LIBRARY.ASSET.AssetManager.Handler));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.ASSET.AssetManager.Handler.AfterLoad' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.ASSET.AssetManager.Handler'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.AfterLoad += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.AfterLoad -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

