//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EP_U3D_LIBRARY_NET_NetConnectionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EP.U3D.LIBRARY.NET.NetConnection), typeof(System.Object));
		L.RegFunction("Reset", Reset);
		L.RegFunction("Connect", Connect);
		L.RegFunction("Reconnect", Reconnect);
		L.RegFunction("Disconnect", Disconnect);
		L.RegFunction("Send", Send);
		L.RegFunction("SendAsync", SendAsync);
		L.RegFunction("New", _CreateEP_U3D_LIBRARY_NET_NetConnection);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnConnectedFunc", get_OnConnectedFunc, set_OnConnectedFunc);
		L.RegVar("OnDisconnectedFunc", get_OnDisconnectedFunc, set_OnDisconnectedFunc);
		L.RegVar("OnReconnectedFunc", get_OnReconnectedFunc, set_OnReconnectedFunc);
		L.RegVar("OnErrorOccurredFunc", get_OnErrorOccurredFunc, set_OnErrorOccurredFunc);
		L.RegVar("OnDataReceivedFunc", get_OnDataReceivedFunc, set_OnDataReceivedFunc);
		L.RegVar("OnHeartBeatedFunc", get_OnHeartBeatedFunc, set_OnHeartBeatedFunc);
		L.RegVar("App", get_App, set_App);
		L.RegVar("Host", get_Host, set_Host);
		L.RegVar("Port", get_Port, set_Port);
		L.RegVar("Protocol", get_Protocol, set_Protocol);
		L.RegVar("BeatID", get_BeatID, set_BeatID);
		L.RegVar("BeatTO", get_BeatTO, set_BeatTO);
		L.RegVar("BeatInterval", get_BeatInterval, set_BeatInterval);
		L.RegVar("BeatMsg", get_BeatMsg, set_BeatMsg);
		L.RegVar("BeatLag", get_BeatLag, null);
		L.RegVar("BeatResp", get_BeatResp, null);
		L.RegVar("Socket", get_Socket, null);
		L.RegVar("Error", get_Error, null);
		L.RegVar("IsConnected", get_IsConnected, null);
		L.RegVar("OnConnectedEvt", get_OnConnectedEvt, set_OnConnectedEvt);
		L.RegVar("OnDisconnectedEvt", get_OnDisconnectedEvt, set_OnDisconnectedEvt);
		L.RegVar("OnReconnectedEvt", get_OnReconnectedEvt, set_OnReconnectedEvt);
		L.RegVar("OnErrorOccurredEvt", get_OnErrorOccurredEvt, set_OnErrorOccurredEvt);
		L.RegVar("OnDataReceivedEvt", get_OnDataReceivedEvt, set_OnDataReceivedEvt);
		L.RegVar("OnHeartBeatedEvt", get_OnHeartBeatedEvt, set_OnHeartBeatedEvt);
		L.RegFunction("StatusDelegate", EP_U3D_LIBRARY_NET_NetConnection_StatusDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEP_U3D_LIBRARY_NET_NetConnection(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 5)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 6)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 7)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 8)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 9)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg8 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 9);
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 10)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg8 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 9);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg9 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 10);
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 11)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg8 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 9);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg9 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 10);
				int arg10 = (int)LuaDLL.luaL_checknumber(L, 11);
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 12)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg8 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 9);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg9 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 10);
				int arg10 = (int)LuaDLL.luaL_checknumber(L, 11);
				int arg11 = (int)LuaDLL.luaL_checknumber(L, 12);
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 13)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg8 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 9);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg9 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 10);
				int arg10 = (int)LuaDLL.luaL_checknumber(L, 11);
				int arg11 = (int)LuaDLL.luaL_checknumber(L, 12);
				int arg12 = (int)LuaDLL.luaL_checknumber(L, 13);
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 14)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Net.Sockets.ProtocolType arg3 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 4, typeof(System.Net.Sockets.ProtocolType));
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg4 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 5);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg5 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 6);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg6 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 7);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg7 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 8);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg8 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 9);
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg9 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 10);
				int arg10 = (int)LuaDLL.luaL_checknumber(L, 11);
				int arg11 = (int)LuaDLL.luaL_checknumber(L, 12);
				int arg12 = (int)LuaDLL.luaL_checknumber(L, 13);
				System.Func<EP.U3D.LIBRARY.POOL.StreamBuffer> arg13 = (System.Func<EP.U3D.LIBRARY.POOL.StreamBuffer>)ToLua.CheckDelegate<System.Func<EP.U3D.LIBRARY.POOL.StreamBuffer>>(L, 14);
				EP.U3D.LIBRARY.NET.NetConnection obj = new EP.U3D.LIBRARY.NET.NetConnection(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EP.U3D.LIBRARY.NET.NetConnection.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject<EP.U3D.LIBRARY.NET.NetConnection>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject<EP.U3D.LIBRARY.NET.NetConnection>(L, 1);
			obj.Connect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject<EP.U3D.LIBRARY.NET.NetConnection>(L, 1);
			obj.Reconnect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Disconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject<EP.U3D.LIBRARY.NET.NetConnection>(L, 1);
			obj.Disconnect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.POOL.StreamBuffer>(L, 2))
			{
				EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject<EP.U3D.LIBRARY.NET.NetConnection>(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer arg0 = (EP.U3D.LIBRARY.POOL.StreamBuffer)ToLua.ToObject(L, 2);
				obj.Send(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject<EP.U3D.LIBRARY.NET.NetConnection>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.Send(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.NET.NetConnection.Send");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.POOL.StreamBuffer>(L, 2))
			{
				EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject<EP.U3D.LIBRARY.NET.NetConnection>(L, 1);
				EP.U3D.LIBRARY.POOL.StreamBuffer arg0 = (EP.U3D.LIBRARY.POOL.StreamBuffer)ToLua.ToObject(L, 2);
				obj.SendAsync(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject<EP.U3D.LIBRARY.NET.NetConnection>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.SendAsync(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.NET.NetConnection.SendAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnConnectedFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ret = obj.OnConnectedFunc;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnConnectedFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDisconnectedFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ret = obj.OnDisconnectedFunc;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnDisconnectedFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReconnectedFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ret = obj.OnReconnectedFunc;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnReconnectedFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnErrorOccurredFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ret = obj.OnErrorOccurredFunc;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnErrorOccurredFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDataReceivedFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ret = obj.OnDataReceivedFunc;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnDataReceivedFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnHeartBeatedFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ret = obj.OnHeartBeatedFunc;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnHeartBeatedFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_App(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			int ret = obj.App;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index App on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Host(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			string ret = obj.Host;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Host on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			int ret = obj.Port;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Port on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Protocol(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			System.Net.Sockets.ProtocolType ret = obj.Protocol;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Protocol on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BeatID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			int ret = obj.BeatID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BeatID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BeatTO(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			int ret = obj.BeatTO;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BeatTO on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BeatInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			int ret = obj.BeatInterval;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BeatInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BeatMsg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			System.Func<EP.U3D.LIBRARY.POOL.StreamBuffer> ret = obj.BeatMsg;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BeatMsg on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BeatLag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			long ret = obj.BeatLag;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BeatLag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BeatResp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			long ret = obj.BeatResp;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BeatResp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Socket(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			System.Net.Sockets.Socket ret = obj.Socket;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Socket on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Error(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			string ret = obj.Error;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Error on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsConnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			bool ret = obj.IsConnected;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsConnected on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnConnectedEvt(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDisconnectedEvt(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReconnectedEvt(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnErrorOccurredEvt(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDataReceivedEvt(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnHeartBeatedEvt(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnConnectedFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg0 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 2);
			obj.OnConnectedFunc = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnConnectedFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDisconnectedFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg0 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 2);
			obj.OnDisconnectedFunc = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnDisconnectedFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReconnectedFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg0 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 2);
			obj.OnReconnectedFunc = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnReconnectedFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnErrorOccurredFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg0 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 2);
			obj.OnErrorOccurredFunc = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnErrorOccurredFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDataReceivedFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg0 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 2);
			obj.OnDataReceivedFunc = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnDataReceivedFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnHeartBeatedFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate arg0 = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)ToLua.CheckDelegate<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>(L, 2);
			obj.OnHeartBeatedFunc = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnHeartBeatedFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_App(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.App = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index App on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Host(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Host = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Host on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Port = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Port on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Protocol(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			System.Net.Sockets.ProtocolType arg0 = (System.Net.Sockets.ProtocolType)ToLua.CheckObject(L, 2, typeof(System.Net.Sockets.ProtocolType));
			obj.Protocol = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Protocol on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BeatID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.BeatID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BeatID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BeatTO(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.BeatTO = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BeatTO on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BeatInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.BeatInterval = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BeatInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BeatMsg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)o;
			System.Func<EP.U3D.LIBRARY.POOL.StreamBuffer> arg0 = (System.Func<EP.U3D.LIBRARY.POOL.StreamBuffer>)ToLua.CheckDelegate<System.Func<EP.U3D.LIBRARY.POOL.StreamBuffer>>(L, 2);
			obj.BeatMsg = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BeatMsg on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnConnectedEvt(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject(L, 1, typeof(EP.U3D.LIBRARY.NET.NetConnection));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.NET.NetConnection.OnConnectedEvt' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.NET.NetConnection'");
			}

			if (arg0.op == EventOp.Add)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnConnectedEvt += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnConnectedEvt -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDisconnectedEvt(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject(L, 1, typeof(EP.U3D.LIBRARY.NET.NetConnection));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.NET.NetConnection.OnDisconnectedEvt' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.NET.NetConnection'");
			}

			if (arg0.op == EventOp.Add)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnDisconnectedEvt += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnDisconnectedEvt -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReconnectedEvt(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject(L, 1, typeof(EP.U3D.LIBRARY.NET.NetConnection));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.NET.NetConnection.OnReconnectedEvt' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.NET.NetConnection'");
			}

			if (arg0.op == EventOp.Add)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnReconnectedEvt += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnReconnectedEvt -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnErrorOccurredEvt(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject(L, 1, typeof(EP.U3D.LIBRARY.NET.NetConnection));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.NET.NetConnection.OnErrorOccurredEvt' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.NET.NetConnection'");
			}

			if (arg0.op == EventOp.Add)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnErrorOccurredEvt += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnErrorOccurredEvt -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDataReceivedEvt(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject(L, 1, typeof(EP.U3D.LIBRARY.NET.NetConnection));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.NET.NetConnection.OnDataReceivedEvt' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.NET.NetConnection'");
			}

			if (arg0.op == EventOp.Add)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnDataReceivedEvt += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnDataReceivedEvt -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnHeartBeatedEvt(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.NET.NetConnection obj = (EP.U3D.LIBRARY.NET.NetConnection)ToLua.CheckObject(L, 1, typeof(EP.U3D.LIBRARY.NET.NetConnection));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.NET.NetConnection.OnHeartBeatedEvt' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.NET.NetConnection'");
			}

			if (arg0.op == EventOp.Add)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnHeartBeatedEvt += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate ev = (EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate)arg0.func;
				obj.OnHeartBeatedEvt -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EP_U3D_LIBRARY_NET_NetConnection_StatusDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<EP.U3D.LIBRARY.NET.NetConnection.StatusDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

