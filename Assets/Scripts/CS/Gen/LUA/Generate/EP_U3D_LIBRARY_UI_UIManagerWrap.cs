//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EP_U3D_LIBRARY_UI_UIManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EP.U3D.LIBRARY.UI.UIManager), typeof(System.Object));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("EnsureWindow", EnsureWindow);
		L.RegFunction("FindOpenedWindow", FindOpenedWindow);
		L.RegFunction("OpenWindow", OpenWindow);
		L.RegFunction("ArrangeWindow", ArrangeWindow);
		L.RegFunction("FocusWindow", FocusWindow);
		L.RegFunction("ResumeWindow", ResumeWindow);
		L.RegFunction("CloseWindow", CloseWindow);
		L.RegFunction("CloseAllWindows", CloseAllWindows);
		L.RegFunction("CloseAllWindowsExcept", CloseAllWindowsExcept);
		L.RegFunction("IsWindowOpened", IsWindowOpened);
		L.RegFunction("New", _CreateEP_U3D_LIBRARY_UI_UIManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("UIRoot", get_UIRoot, set_UIRoot);
		L.RegVar("Camera", get_Camera, set_Camera);
		L.RegVar("Canvas", get_Canvas, set_Canvas);
		L.RegVar("CachedWindows", get_CachedWindows, set_CachedWindows);
		L.RegVar("OpenedWindows", get_OpenedWindows, set_OpenedWindows);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEP_U3D_LIBRARY_UI_UIManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.UI.UIManager obj = new EP.U3D.LIBRARY.UI.UIManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EP.U3D.LIBRARY.UI.UIManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
			EP.U3D.LIBRARY.UI.UIManager.Initialize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnsureWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			EP.U3D.LIBRARY.UI.UIMeta arg0 = (EP.U3D.LIBRARY.UI.UIMeta)ToLua.CheckObject<EP.U3D.LIBRARY.UI.UIMeta>(L, 1);
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			EP.U3D.LIBRARY.UI.IUIWindow o = EP.U3D.LIBRARY.UI.UIManager.EnsureWindow(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindOpenedWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.UI.UIMeta arg0 = (EP.U3D.LIBRARY.UI.UIMeta)ToLua.CheckObject<EP.U3D.LIBRARY.UI.UIMeta>(L, 1);
			EP.U3D.LIBRARY.UI.IUIWindow o = EP.U3D.LIBRARY.UI.UIManager.FindOpenedWindow(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckTypes<EP.U3D.LIBRARY.UI.UIMeta, EP.U3D.LIBRARY.UI.UIMeta, EP.U3D.LIBRARY.UI.UIMeta, UnityEngine.Transform>(L, 1) && TypeChecker.CheckParamsType<object>(L, 5, count - 4))
			{
				EP.U3D.LIBRARY.UI.UIMeta arg0 = (EP.U3D.LIBRARY.UI.UIMeta)ToLua.ToObject(L, 1);
				EP.U3D.LIBRARY.UI.UIMeta arg1 = (EP.U3D.LIBRARY.UI.UIMeta)ToLua.ToObject(L, 2);
				EP.U3D.LIBRARY.UI.UIMeta arg2 = (EP.U3D.LIBRARY.UI.UIMeta)ToLua.ToObject(L, 3);
				UnityEngine.Transform arg3 = (UnityEngine.Transform)ToLua.ToObject(L, 4);
				object[] arg4 = ToLua.ToParamsObject(L, 5, count - 4);
				EP.U3D.LIBRARY.UI.IUIWindow o = EP.U3D.LIBRARY.UI.UIManager.OpenWindow(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<EP.U3D.LIBRARY.UI.UIMeta, UnityEngine.Transform>(L, 1) && TypeChecker.CheckParamsType<object>(L, 3, count - 2))
			{
				EP.U3D.LIBRARY.UI.UIMeta arg0 = (EP.U3D.LIBRARY.UI.UIMeta)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				object[] arg2 = ToLua.ToParamsObject(L, 3, count - 2);
				EP.U3D.LIBRARY.UI.IUIWindow o = EP.U3D.LIBRARY.UI.UIManager.OpenWindow(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<EP.U3D.LIBRARY.UI.UIMeta>(L, 1) && TypeChecker.CheckParamsType<object>(L, 2, count - 1))
			{
				EP.U3D.LIBRARY.UI.UIMeta arg0 = (EP.U3D.LIBRARY.UI.UIMeta)ToLua.ToObject(L, 1);
				object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
				EP.U3D.LIBRARY.UI.IUIWindow o = EP.U3D.LIBRARY.UI.UIManager.OpenWindow(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIManager.OpenWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ArrangeWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			EP.U3D.LIBRARY.UI.IUIWindow arg0 = (EP.U3D.LIBRARY.UI.IUIWindow)ToLua.CheckObject<EP.U3D.LIBRARY.UI.IUIWindow>(L, 1);
			EP.U3D.LIBRARY.UI.IUIWindow arg1 = (EP.U3D.LIBRARY.UI.IUIWindow)ToLua.CheckObject<EP.U3D.LIBRARY.UI.IUIWindow>(L, 2);
			EP.U3D.LIBRARY.UI.IUIWindow arg2 = (EP.U3D.LIBRARY.UI.IUIWindow)ToLua.CheckObject<EP.U3D.LIBRARY.UI.IUIWindow>(L, 3);
			EP.U3D.LIBRARY.UI.UIManager.ArrangeWindow(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FocusWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.UI.UIMeta>(L, 1))
			{
				EP.U3D.LIBRARY.UI.UIMeta arg0 = (EP.U3D.LIBRARY.UI.UIMeta)ToLua.ToObject(L, 1);
				EP.U3D.LIBRARY.UI.UIManager.FocusWindow(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.UI.IUIWindow>(L, 1))
			{
				EP.U3D.LIBRARY.UI.IUIWindow arg0 = (EP.U3D.LIBRARY.UI.IUIWindow)ToLua.ToObject(L, 1);
				EP.U3D.LIBRARY.UI.UIManager.FocusWindow(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIManager.FocusWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResumeWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			EP.U3D.LIBRARY.UI.UIManager.ResumeWindow();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.UI.UIMeta>(L, 1))
			{
				EP.U3D.LIBRARY.UI.UIMeta arg0 = (EP.U3D.LIBRARY.UI.UIMeta)ToLua.ToObject(L, 1);
				EP.U3D.LIBRARY.UI.UIManager.CloseWindow(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.UI.IUIWindow>(L, 1))
			{
				EP.U3D.LIBRARY.UI.IUIWindow arg0 = (EP.U3D.LIBRARY.UI.IUIWindow)ToLua.ToObject(L, 1);
				EP.U3D.LIBRARY.UI.UIManager.CloseWindow(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.UI.UIMeta, bool>(L, 1))
			{
				EP.U3D.LIBRARY.UI.UIMeta arg0 = (EP.U3D.LIBRARY.UI.UIMeta)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				EP.U3D.LIBRARY.UI.UIManager.CloseWindow(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<EP.U3D.LIBRARY.UI.IUIWindow, bool>(L, 1))
			{
				EP.U3D.LIBRARY.UI.IUIWindow arg0 = (EP.U3D.LIBRARY.UI.IUIWindow)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				EP.U3D.LIBRARY.UI.UIManager.CloseWindow(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIManager.CloseWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseAllWindows(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			EP.U3D.LIBRARY.UI.UIManager.CloseAllWindows();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseAllWindowsExcept(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			EP.U3D.LIBRARY.UI.UIMeta[] arg0 = ToLua.CheckParamsObject<EP.U3D.LIBRARY.UI.UIMeta>(L, 1, count);
			EP.U3D.LIBRARY.UI.UIManager.CloseAllWindowsExcept(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsWindowOpened(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.UI.UIMeta arg0 = (EP.U3D.LIBRARY.UI.UIMeta)ToLua.CheckObject<EP.U3D.LIBRARY.UI.UIMeta>(L, 1);
			EP.U3D.LIBRARY.UI.IUIWindow o = EP.U3D.LIBRARY.UI.UIManager.IsWindowOpened(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIRoot(IntPtr L)
	{
		try
		{
			ToLua.Push(L, EP.U3D.LIBRARY.UI.UIManager.UIRoot);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Camera(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, EP.U3D.LIBRARY.UI.UIManager.Camera);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Canvas(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, EP.U3D.LIBRARY.UI.UIManager.Canvas);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CachedWindows(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, EP.U3D.LIBRARY.UI.UIManager.CachedWindows);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OpenedWindows(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, EP.U3D.LIBRARY.UI.UIManager.OpenedWindows);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UIRoot(IntPtr L)
	{
		try
		{
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			EP.U3D.LIBRARY.UI.UIManager.UIRoot = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Camera(IntPtr L)
	{
		try
		{
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 2, typeof(UnityEngine.Camera));
			EP.U3D.LIBRARY.UI.UIManager.Camera = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Canvas(IntPtr L)
	{
		try
		{
			UnityEngine.Canvas arg0 = (UnityEngine.Canvas)ToLua.CheckObject(L, 2, typeof(UnityEngine.Canvas));
			EP.U3D.LIBRARY.UI.UIManager.Canvas = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CachedWindows(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<EP.U3D.LIBRARY.UI.IUIWindow> arg0 = (System.Collections.Generic.List<EP.U3D.LIBRARY.UI.IUIWindow>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<EP.U3D.LIBRARY.UI.IUIWindow>));
			EP.U3D.LIBRARY.UI.UIManager.CachedWindows = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OpenedWindows(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<EP.U3D.LIBRARY.UI.IUIWindow> arg0 = (System.Collections.Generic.List<EP.U3D.LIBRARY.UI.IUIWindow>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<EP.U3D.LIBRARY.UI.IUIWindow>));
			EP.U3D.LIBRARY.UI.UIManager.OpenedWindows = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

