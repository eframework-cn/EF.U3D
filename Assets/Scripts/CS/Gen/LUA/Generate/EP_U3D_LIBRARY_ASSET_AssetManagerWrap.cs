//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EP_U3D_LIBRARY_ASSET_AssetManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EP.U3D.LIBRARY.ASSET.AssetManager), typeof(System.Object));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("LoadManifest", LoadManifest);
		L.RegFunction("LoadAssetBundle", LoadAssetBundle);
		L.RegFunction("LoadAssetBundleAsync", LoadAssetBundleAsync);
		L.RegFunction("UnloadAssetBundle", UnloadAssetBundle);
		L.RegFunction("LoadAsset", LoadAsset);
		L.RegFunction("LoadAssetAsync", LoadAssetAsync);
		L.RegFunction("UnloadAsset", UnloadAsset);
		L.RegFunction("UnloadObject", UnloadObject);
		L.RegFunction("ObtainObject", ObtainObject);
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("LoadSceneAsync", LoadSceneAsync);
		L.RegFunction("UnloadScene", UnloadScene);
		L.RegFunction("LoadAll", LoadAll);
		L.RegFunction("UnloadAll", UnloadAll);
		L.RegFunction("LoadDiff", LoadDiff);
		L.RegFunction("Progress", Progress);
		L.RegFunction("Busy", Busy);
		L.RegFunction("New", _CreateEP_U3D_LIBRARY_ASSET_AssetManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OK", get_OK, set_OK);
		L.RegVar("Manifest", get_Manifest, set_Manifest);
		L.RegVar("MainBundle", get_MainBundle, set_MainBundle);
		L.RegVar("LoadingScenes", get_LoadingScenes, set_LoadingScenes);
		L.RegVar("LoadingAssets", get_LoadingAssets, set_LoadingAssets);
		L.RegVar("LoadingBundles", get_LoadingBundles, set_LoadingBundles);
		L.RegVar("LoadedBundles", get_LoadedBundles, set_LoadedBundles);
		L.RegVar("LoadedScenes", get_LoadedScenes, set_LoadedScenes);
		L.RegVar("LoadedObjects", get_LoadedObjects, set_LoadedObjects);
		L.RegVar("BeforeLoadAsset", get_BeforeLoadAsset, set_BeforeLoadAsset);
		L.RegVar("AfterLoadAsset", get_AfterLoadAsset, set_AfterLoadAsset);
		L.RegVar("BeforeLoadScene", get_BeforeLoadScene, set_BeforeLoadScene);
		L.RegVar("AfterLoadScene", get_AfterLoadScene, set_AfterLoadScene);
		L.RegVar("BeforeUnloadAll", get_BeforeUnloadAll, set_BeforeUnloadAll);
		L.RegVar("AfterUnloadAll", get_AfterUnloadAll, set_AfterUnloadAll);
		L.RegFunction("Callback", EP_U3D_LIBRARY_ASSET_AssetManager_Callback);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEP_U3D_LIBRARY_ASSET_AssetManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.ASSET.AssetManager obj = new EP.U3D.LIBRARY.ASSET.AssetManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EP.U3D.LIBRARY.ASSET.AssetManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			EP.U3D.LIBRARY.ASSET.AssetManager.Initialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadManifest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			EP.U3D.LIBRARY.ASSET.AssetManager.LoadManifest();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.AssetBundle o = EP.U3D.LIBRARY.ASSET.AssetManager.LoadAssetBundle(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetBundleAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.Handler arg1 = (EP.U3D.LIBRARY.ASSET.AssetManager.Handler)ToLua.CheckObject<EP.U3D.LIBRARY.ASSET.AssetManager.Handler>(L, 2);
			System.Collections.IEnumerator o = EP.U3D.LIBRARY.ASSET.AssetManager.LoadAssetBundleAsync(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.UnloadAssetBundle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				UnityEngine.Object o = EP.U3D.LIBRARY.ASSET.AssetManager.LoadAsset(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.Object o = EP.U3D.LIBRARY.ASSET.AssetManager.LoadAsset(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.ASSET.AssetManager.LoadAsset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				EP.U3D.LIBRARY.ASSET.AssetManager.Handler o = EP.U3D.LIBRARY.ASSET.AssetManager.LoadAssetAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				EP.U3D.LIBRARY.ASSET.AssetManager.Callback arg2 = (EP.U3D.LIBRARY.ASSET.AssetManager.Callback)ToLua.CheckDelegate<EP.U3D.LIBRARY.ASSET.AssetManager.Callback>(L, 3);
				EP.U3D.LIBRARY.ASSET.AssetManager.Handler o = EP.U3D.LIBRARY.ASSET.AssetManager.LoadAssetAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				EP.U3D.LIBRARY.ASSET.AssetManager.Callback arg2 = (EP.U3D.LIBRARY.ASSET.AssetManager.Callback)ToLua.CheckDelegate<EP.U3D.LIBRARY.ASSET.AssetManager.Callback>(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				EP.U3D.LIBRARY.ASSET.AssetManager.Handler o = EP.U3D.LIBRARY.ASSET.AssetManager.LoadAssetAsync(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.ASSET.AssetManager.LoadAssetAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.UnloadAsset(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			EP.U3D.LIBRARY.ASSET.AssetManager.UnloadObject(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ObtainObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			EP.U3D.LIBRARY.ASSET.AssetManager.ObtainObject(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				EP.U3D.LIBRARY.ASSET.AssetManager.LoadScene(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.SceneManagement.LoadSceneMode arg1 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.CheckObject(L, 2, typeof(UnityEngine.SceneManagement.LoadSceneMode));
				EP.U3D.LIBRARY.ASSET.AssetManager.LoadScene(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.ASSET.AssetManager.LoadScene");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSceneAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				EP.U3D.LIBRARY.ASSET.AssetManager.Handler o = EP.U3D.LIBRARY.ASSET.AssetManager.LoadSceneAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
				EP.U3D.LIBRARY.ASSET.AssetManager.Handler o = EP.U3D.LIBRARY.ASSET.AssetManager.LoadSceneAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
				UnityEngine.SceneManagement.LoadSceneMode arg2 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.CheckObject(L, 3, typeof(UnityEngine.SceneManagement.LoadSceneMode));
				EP.U3D.LIBRARY.ASSET.AssetManager.Handler o = EP.U3D.LIBRARY.ASSET.AssetManager.LoadSceneAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.ASSET.AssetManager.LoadSceneAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.UnloadScene(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			EP.U3D.LIBRARY.ASSET.AssetManager.LoadAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			EP.U3D.LIBRARY.ASSET.AssetManager.UnloadAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadDiff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.ASSET.FileManifest.DifferInfo arg0 = (EP.U3D.LIBRARY.ASSET.FileManifest.DifferInfo)ToLua.CheckObject<EP.U3D.LIBRARY.ASSET.FileManifest.DifferInfo>(L, 1);
			EP.U3D.LIBRARY.ASSET.AssetManager.LoadDiff(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Progress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			float o = EP.U3D.LIBRARY.ASSET.AssetManager.Progress();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Busy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = EP.U3D.LIBRARY.ASSET.AssetManager.Busy();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OK(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, EP.U3D.LIBRARY.ASSET.AssetManager.OK);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Manifest(IntPtr L)
	{
		try
		{
			ToLua.Push(L, EP.U3D.LIBRARY.ASSET.AssetManager.Manifest);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MainBundle(IntPtr L)
	{
		try
		{
			ToLua.Push(L, EP.U3D.LIBRARY.ASSET.AssetManager.MainBundle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadingScenes(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, EP.U3D.LIBRARY.ASSET.AssetManager.LoadingScenes);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadingAssets(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, EP.U3D.LIBRARY.ASSET.AssetManager.LoadingAssets);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadingBundles(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, EP.U3D.LIBRARY.ASSET.AssetManager.LoadingBundles);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadedBundles(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, EP.U3D.LIBRARY.ASSET.AssetManager.LoadedBundles);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadedScenes(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, EP.U3D.LIBRARY.ASSET.AssetManager.LoadedScenes);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadedObjects(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, EP.U3D.LIBRARY.ASSET.AssetManager.LoadedObjects);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BeforeLoadAsset(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<string>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AfterLoadAsset(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<string>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BeforeLoadScene(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<string>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AfterLoadScene(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<string>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BeforeUnloadAll(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<UnityEngine.SceneManagement.Scene>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AfterUnloadAll(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<UnityEngine.SceneManagement.Scene>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OK(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			EP.U3D.LIBRARY.ASSET.AssetManager.OK = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Manifest(IntPtr L)
	{
		try
		{
			UnityEngine.AssetBundleManifest arg0 = (UnityEngine.AssetBundleManifest)ToLua.CheckObject<UnityEngine.AssetBundleManifest>(L, 2);
			EP.U3D.LIBRARY.ASSET.AssetManager.Manifest = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MainBundle(IntPtr L)
	{
		try
		{
			UnityEngine.AssetBundle arg0 = (UnityEngine.AssetBundle)ToLua.CheckObject<UnityEngine.AssetBundle>(L, 2);
			EP.U3D.LIBRARY.ASSET.AssetManager.MainBundle = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadingScenes(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.SceneTask> arg0 = (System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.SceneTask>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.SceneTask>));
			EP.U3D.LIBRARY.ASSET.AssetManager.LoadingScenes = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadingAssets(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.AssetTask> arg0 = (System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.AssetTask>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.AssetTask>));
			EP.U3D.LIBRARY.ASSET.AssetManager.LoadingAssets = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadingBundles(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.BundleTask> arg0 = (System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.BundleTask>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.BundleTask>));
			EP.U3D.LIBRARY.ASSET.AssetManager.LoadingBundles = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadedBundles(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.BundleInfo> arg0 = (System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.BundleInfo>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,EP.U3D.LIBRARY.ASSET.AssetManager.BundleInfo>));
			EP.U3D.LIBRARY.ASSET.AssetManager.LoadedBundles = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadedScenes(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<string,string> arg0 = (System.Collections.Generic.Dictionary<string,string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,string>));
			EP.U3D.LIBRARY.ASSET.AssetManager.LoadedScenes = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadedObjects(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<EP.U3D.LIBRARY.ASSET.ObjectRefer> arg0 = (System.Collections.Generic.List<EP.U3D.LIBRARY.ASSET.ObjectRefer>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<EP.U3D.LIBRARY.ASSET.ObjectRefer>));
			EP.U3D.LIBRARY.ASSET.AssetManager.LoadedObjects = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BeforeLoadAsset(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.ASSET.AssetManager.BeforeLoadAsset' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.ASSET.AssetManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.BeforeLoadAsset += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.BeforeLoadAsset -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AfterLoadAsset(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.ASSET.AssetManager.AfterLoadAsset' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.ASSET.AssetManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.AfterLoadAsset += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.AfterLoadAsset -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BeforeLoadScene(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.ASSET.AssetManager.BeforeLoadScene' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.ASSET.AssetManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.BeforeLoadScene += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.BeforeLoadScene -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AfterLoadScene(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.ASSET.AssetManager.AfterLoadScene' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.ASSET.AssetManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.AfterLoadScene += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.AfterLoadScene -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BeforeUnloadAll(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.ASSET.AssetManager.BeforeUnloadAll' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.ASSET.AssetManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<UnityEngine.SceneManagement.Scene> ev = (System.Action<UnityEngine.SceneManagement.Scene>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.BeforeUnloadAll += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<UnityEngine.SceneManagement.Scene> ev = (System.Action<UnityEngine.SceneManagement.Scene>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.BeforeUnloadAll -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AfterUnloadAll(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.ASSET.AssetManager.AfterUnloadAll' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.ASSET.AssetManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<UnityEngine.SceneManagement.Scene> ev = (System.Action<UnityEngine.SceneManagement.Scene>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.AfterUnloadAll += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<UnityEngine.SceneManagement.Scene> ev = (System.Action<UnityEngine.SceneManagement.Scene>)arg0.func;
				EP.U3D.LIBRARY.ASSET.AssetManager.AfterUnloadAll -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EP_U3D_LIBRARY_ASSET_AssetManager_Callback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<EP.U3D.LIBRARY.ASSET.AssetManager.Callback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<EP.U3D.LIBRARY.ASSET.AssetManager.Callback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

