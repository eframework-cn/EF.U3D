//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EP_U3D_LIBRARY_PATCH_UpdaterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EP.U3D.LIBRARY.PATCH.Updater), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("JsonTimeout", JsonTimeout);
		L.RegFunction("ReqJson", ReqJson);
		L.RegFunction("ParseJson", ParseJson);
		L.RegFunction("AfterJson", AfterJson);
		L.RegFunction("CheckUpdate", CheckUpdate);
		L.RegFunction("UpdatePatch", UpdatePatch);
		L.RegFunction("Reload", Reload);
		L.RegFunction("Unload", Unload);
		L.RegFunction("Finish", Finish);
		L.RegFunction("Awake", Awake);
		L.RegFunction("Start", Start);
		L.RegFunction("Update", Update);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("OpenBG", OpenBG);
		L.RegFunction("CloseBG", CloseBG);
		L.RegFunction("SetVersion", SetVersion);
		L.RegFunction("OpenUpdate", OpenUpdate);
		L.RegFunction("CloseUpdate", CloseUpdate);
		L.RegFunction("SetUpdateTips", SetUpdateTips);
		L.RegFunction("SetBGTips", SetBGTips);
		L.RegFunction("SetProgress", SetProgress);
		L.RegFunction("SetUpdateProgress", SetUpdateProgress);
		L.RegFunction("OpenConfirm", OpenConfirm);
		L.RegFunction("CloseConfirm", CloseConfirm);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, set_Instance);
		L.RegVar("TIPS1001", get_TIPS1001, null);
		L.RegVar("TIPS1002", get_TIPS1002, null);
		L.RegVar("TIPS1003", get_TIPS1003, null);
		L.RegVar("TIPS1004", get_TIPS1004, null);
		L.RegVar("TIPS1005", get_TIPS1005, null);
		L.RegVar("TIPS1006", get_TIPS1006, null);
		L.RegVar("TIPS1007", get_TIPS1007, null);
		L.RegVar("TIPS1008", get_TIPS1008, null);
		L.RegVar("TIPS1009", get_TIPS1009, null);
		L.RegVar("TIPS1010", get_TIPS1010, null);
		L.RegVar("TIPS1011", get_TIPS1011, null);
		L.RegVar("Patcher", get_Patcher, set_Patcher);
		L.RegVar("JsonTO", get_JsonTO, set_JsonTO);
		L.RegVar("JsonHttp", get_JsonHttp, set_JsonHttp);
		L.RegVar("PatchHttp", get_PatchHttp, set_PatchHttp);
		L.RegVar("UIBG", get_UIBG, set_UIBG);
		L.RegVar("UIUpdate", get_UIUpdate, set_UIUpdate);
		L.RegVar("UIConfirm", get_UIConfirm, set_UIConfirm);
		L.RegVar("OnStarted", get_OnStarted, set_OnStarted);
		L.RegVar("OnFinished", get_OnFinished, set_OnFinished);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 1);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			EP.U3D.LIBRARY.PATCH.Updater.Initialize(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int JsonTimeout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			System.Collections.IEnumerator o = obj.JsonTimeout();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReqJson(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.ReqJson();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseJson(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.ParseJson(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AfterJson(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.AfterJson();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.CheckUpdate();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdatePatch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			long arg1 = LuaDLL.tolua_checkint64(L, 3);
			System.Collections.IEnumerator o = obj.UpdatePatch(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.Reload();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.Unload();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Finish(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			System.Collections.IEnumerator o = obj.Finish();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Awake(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.Awake();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.Start();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.OnDestroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenBG(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.OpenBG();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseBG(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.CloseBG();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.SetVersion();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.OpenUpdate();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.CloseUpdate();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUpdateTips(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetUpdateTips(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBGTips(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetBGTips(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetProgress(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				obj.SetProgress(arg0);
				return 0;
			}
			else if (count == 3)
			{
				EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.SetProgress(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.SetProgress(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.PATCH.Updater.SetProgress");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUpdateProgress(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
				long arg0 = LuaDLL.tolua_checkint64(L, 2);
				long arg1 = LuaDLL.tolua_checkint64(L, 3);
				obj.SetUpdateProgress(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
				long arg0 = LuaDLL.tolua_checkint64(L, 2);
				long arg1 = LuaDLL.tolua_checkint64(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.SetUpdateProgress(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.PATCH.Updater.SetUpdateProgress");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenConfirm(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.OpenConfirm(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				obj.OpenConfirm(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				obj.OpenConfirm(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.PATCH.Updater.OpenConfirm");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseConfirm(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 1);
			obj.CloseConfirm();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, EP.U3D.LIBRARY.PATCH.Updater.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIPS1001(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EP.U3D.LIBRARY.PATCH.Updater.TIPS1001);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIPS1002(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EP.U3D.LIBRARY.PATCH.Updater.TIPS1002);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIPS1003(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EP.U3D.LIBRARY.PATCH.Updater.TIPS1003);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIPS1004(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EP.U3D.LIBRARY.PATCH.Updater.TIPS1004);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIPS1005(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EP.U3D.LIBRARY.PATCH.Updater.TIPS1005);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIPS1006(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EP.U3D.LIBRARY.PATCH.Updater.TIPS1006);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIPS1007(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EP.U3D.LIBRARY.PATCH.Updater.TIPS1007);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIPS1008(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EP.U3D.LIBRARY.PATCH.Updater.TIPS1008);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIPS1009(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EP.U3D.LIBRARY.PATCH.Updater.TIPS1009);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIPS1010(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EP.U3D.LIBRARY.PATCH.Updater.TIPS1010);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIPS1011(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, EP.U3D.LIBRARY.PATCH.Updater.TIPS1011);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Patcher(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			EP.U3D.LIBRARY.PATCH.Patcher ret = obj.Patcher;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Patcher on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JsonTO(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			UnityEngine.Coroutine ret = obj.JsonTO;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JsonTO on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JsonHttp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			EP.U3D.LIBRARY.NET.HttpListener ret = obj.JsonHttp;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JsonHttp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PatchHttp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			EP.U3D.LIBRARY.NET.HttpListener ret = obj.PatchHttp;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PatchHttp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIBG(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			UnityEngine.GameObject ret = obj.UIBG;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UIBG on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			UnityEngine.GameObject ret = obj.UIUpdate;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UIUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIConfirm(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			UnityEngine.GameObject ret = obj.UIConfirm;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UIConfirm on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnStarted(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnFinished(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Instance(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.PATCH.Updater arg0 = (EP.U3D.LIBRARY.PATCH.Updater)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Updater>(L, 2);
			EP.U3D.LIBRARY.PATCH.Updater.Instance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Patcher(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			EP.U3D.LIBRARY.PATCH.Patcher arg0 = (EP.U3D.LIBRARY.PATCH.Patcher)ToLua.CheckObject<EP.U3D.LIBRARY.PATCH.Patcher>(L, 2);
			obj.Patcher = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Patcher on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_JsonTO(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			UnityEngine.Coroutine arg0 = (UnityEngine.Coroutine)ToLua.CheckObject(L, 2, typeof(UnityEngine.Coroutine));
			obj.JsonTO = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JsonTO on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_JsonHttp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			EP.U3D.LIBRARY.NET.HttpListener arg0 = (EP.U3D.LIBRARY.NET.HttpListener)ToLua.CheckObject<EP.U3D.LIBRARY.NET.HttpListener>(L, 2);
			obj.JsonHttp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JsonHttp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PatchHttp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			EP.U3D.LIBRARY.NET.HttpListener arg0 = (EP.U3D.LIBRARY.NET.HttpListener)ToLua.CheckObject<EP.U3D.LIBRARY.NET.HttpListener>(L, 2);
			obj.PatchHttp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PatchHttp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UIBG(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.UIBG = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UIBG on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UIUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.UIUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UIUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UIConfirm(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.PATCH.Updater obj = (EP.U3D.LIBRARY.PATCH.Updater)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.UIConfirm = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UIConfirm on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnStarted(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.PATCH.Updater.OnStarted' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.PATCH.Updater'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				EP.U3D.LIBRARY.PATCH.Updater.OnStarted += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				EP.U3D.LIBRARY.PATCH.Updater.OnStarted -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnFinished(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EP.U3D.LIBRARY.PATCH.Updater.OnFinished' can only appear on the left hand side of += or -= when used outside of the type 'EP.U3D.LIBRARY.PATCH.Updater'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				EP.U3D.LIBRARY.PATCH.Updater.OnFinished += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				EP.U3D.LIBRARY.PATCH.Updater.OnFinished -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

