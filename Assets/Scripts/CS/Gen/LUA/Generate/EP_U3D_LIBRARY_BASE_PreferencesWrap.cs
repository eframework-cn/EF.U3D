//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EP_U3D_LIBRARY_BASE_PreferencesWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EP.U3D.LIBRARY.BASE.Preferences), typeof(System.Object));
		L.RegFunction("Read", Read);
		L.RegFunction("New", _CreateEP_U3D_LIBRARY_BASE_Preferences);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Name", get_Name, set_Name);
		L.RegVar("Path", get_Path, set_Path);
		L.RegVar("Developer", get_Developer, set_Developer);
		L.RegVar("ListenLog", get_ListenLog, set_ListenLog);
		L.RegVar("PushPatch", get_PushPatch, set_PushPatch);
		L.RegVar("PushArchive", get_PushArchive, set_PushArchive);
		L.RegVar("SWidth", get_SWidth, set_SWidth);
		L.RegVar("SHeight", get_SHeight, set_SHeight);
		L.RegVar("Pauseable", get_Pauseable, set_Pauseable);
		L.RegVar("CheckMode", get_CheckMode, set_CheckMode);
		L.RegVar("AssetBundle", get_AssetBundle, set_AssetBundle);
		L.RegVar("ScriptBundle", get_ScriptBundle, set_ScriptBundle);
		L.RegVar("CatVerbose", get_CatVerbose, set_CatVerbose);
		L.RegVar("CatException", get_CatException, set_CatException);
		L.RegVar("UUID", get_UUID, set_UUID);
		L.RegVar("LiveMode", get_LiveMode, set_LiveMode);
		L.RegVar("ReleaseMode", get_ReleaseMode, set_ReleaseMode);
		L.RegVar("CheckUpdate", get_CheckUpdate, set_CheckUpdate);
		L.RegVar("ForceUpdate", get_ForceUpdate, set_ForceUpdate);
		L.RegVar("LogServer", get_LogServer, set_LogServer);
		L.RegVar("PatchServer", get_PatchServer, set_PatchServer);
		L.RegVar("CgiIndex", get_CgiIndex, set_CgiIndex);
		L.RegVar("CgiServer", get_CgiServer, set_CgiServer);
		L.RegVar("ConnIndex", get_ConnIndex, set_ConnIndex);
		L.RegVar("ConnServer", get_ConnServer, set_ConnServer);
		L.RegVar("Error", get_Error, set_Error);
		L.RegVar("Instance", get_Instance, set_Instance);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEP_U3D_LIBRARY_BASE_Preferences(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.BASE.Preferences obj = new EP.U3D.LIBRARY.BASE.Preferences();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				EP.U3D.LIBRARY.BASE.Preferences obj = new EP.U3D.LIBRARY.BASE.Preferences(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EP.U3D.LIBRARY.BASE.Preferences.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Read(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)ToLua.CheckObject<EP.U3D.LIBRARY.BASE.Preferences>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Read(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string ret = obj.Path;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Path on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Developer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string ret = obj.Developer;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Developer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ListenLog(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string ret = obj.ListenLog;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ListenLog on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PushPatch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string ret = obj.PushPatch;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PushPatch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PushArchive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string ret = obj.PushArchive;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PushArchive on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			int ret = obj.SWidth;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SWidth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			int ret = obj.SHeight;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SHeight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pauseable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool ret = obj.Pauseable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pauseable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CheckMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool ret = obj.CheckMode;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CheckMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetBundle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool ret = obj.AssetBundle;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetBundle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ScriptBundle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool ret = obj.ScriptBundle;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ScriptBundle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CatVerbose(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool ret = obj.CatVerbose;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CatVerbose on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CatException(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool ret = obj.CatException;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CatException on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UUID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string ret = obj.UUID;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UUID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LiveMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool ret = obj.LiveMode;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LiveMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReleaseMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool ret = obj.ReleaseMode;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReleaseMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CheckUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool ret = obj.CheckUpdate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CheckUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ForceUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool ret = obj.ForceUpdate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ForceUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogServer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string ret = obj.LogServer;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LogServer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PatchServer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string ret = obj.PatchServer;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PatchServer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CgiIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			int ret = obj.CgiIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CgiIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CgiServer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			System.Collections.Generic.List<string> ret = obj.CgiServer;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CgiServer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			int ret = obj.ConnIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnServer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			System.Collections.Generic.List<string> ret = obj.ConnServer;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnServer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Error(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string ret = obj.Error;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Error on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, EP.U3D.LIBRARY.BASE.Preferences.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Name = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Path = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Path on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Developer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Developer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Developer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ListenLog(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ListenLog = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ListenLog on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PushPatch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.PushPatch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PushPatch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PushArchive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.PushArchive = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PushArchive on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SWidth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SWidth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SHeight = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SHeight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Pauseable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Pauseable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pauseable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CheckMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CheckMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CheckMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetBundle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AssetBundle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetBundle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ScriptBundle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ScriptBundle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ScriptBundle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CatVerbose(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CatVerbose = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CatVerbose on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CatException(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CatException = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CatException on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UUID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.UUID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UUID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LiveMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.LiveMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LiveMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReleaseMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ReleaseMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReleaseMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CheckUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CheckUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CheckUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ForceUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ForceUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ForceUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LogServer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.LogServer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LogServer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PatchServer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.PatchServer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PatchServer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CgiIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CgiIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CgiIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CgiServer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			obj.CgiServer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CgiServer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ConnIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ConnIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ConnServer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			obj.ConnServer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnServer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Error(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EP.U3D.LIBRARY.BASE.Preferences obj = (EP.U3D.LIBRARY.BASE.Preferences)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Error = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Error on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Instance(IntPtr L)
	{
		try
		{
			EP.U3D.LIBRARY.BASE.Preferences arg0 = (EP.U3D.LIBRARY.BASE.Preferences)ToLua.CheckObject<EP.U3D.LIBRARY.BASE.Preferences>(L, 2);
			EP.U3D.LIBRARY.BASE.Preferences.Instance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

