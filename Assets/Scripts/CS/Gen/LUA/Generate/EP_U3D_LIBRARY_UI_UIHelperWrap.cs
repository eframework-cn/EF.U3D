//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EP_U3D_LIBRARY_UI_UIHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EP.U3D.LIBRARY.UI.UIHelper), typeof(System.Object));
		L.RegFunction("GetTransform", GetTransform);
		L.RegFunction("GetChildren", GetChildren);
		L.RegFunction("SetPosition", SetPosition);
		L.RegFunction("SetLocalPosition", SetLocalPosition);
		L.RegFunction("SetRotation", SetRotation);
		L.RegFunction("SetLocalRotation", SetLocalRotation);
		L.RegFunction("SetLocalScale", SetLocalScale);
		L.RegFunction("SetParent", SetParent);
		L.RegFunction("DestroyGO", DestroyGO);
		L.RegFunction("CloneGO", CloneGO);
		L.RegFunction("SetLayer", SetLayer);
		L.RegFunction("SetActiveState", SetActiveState);
		L.RegFunction("AddChild", AddChild);
		L.RegFunction("EnsureChild", EnsureChild);
		L.RegFunction("EachChild", EachChild);
		L.RegFunction("ShowChild", ShowChild);
		L.RegFunction("HideChild", HideChild);
		L.RegFunction("RefreshObSort", RefreshObSort);
		L.RegFunction("GetComponentInParent", GetComponentInParent);
		L.RegFunction("GetComponent", GetComponent);
		L.RegFunction("GetComponentInChildren", GetComponentInChildren);
		L.RegFunction("GetComponentsInParent", GetComponentsInParent);
		L.RegFunction("GetComponents", GetComponents);
		L.RegFunction("GetComponentsInChildren", GetComponentsInChildren);
		L.RegFunction("AddComponent", AddComponent);
		L.RegFunction("RemoveComponent", RemoveComponent);
		L.RegFunction("SetComponentEnabled", SetComponentEnabled);
		L.RegFunction("SetGraphicAlpha", SetGraphicAlpha);
		L.RegFunction("SetButtonEvent", SetButtonEvent);
		L.RegFunction("SetEventEnabled", SetEventEnabled);
		L.RegFunction("SetLabelText", SetLabelText);
		L.RegFunction("SetMeshProText", SetMeshProText);
		L.RegFunction("SetSpriteName", SetSpriteName);
		L.RegFunction("SetSpriteRes", SetSpriteRes);
		L.RegFunction("SetSpriteAlpha", SetSpriteAlpha);
		L.RegFunction("SetRawImage", SetRawImage);
		L.RegFunction("GetTexture", GetTexture);
		L.RegFunction("WWWTexture", WWWTexture);
		L.RegFunction("New", _CreateEP_U3D_LIBRARY_UI_UIHelper);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegFunction("EachChildHandler", EP_U3D_LIBRARY_UI_UIHelper_EachChildHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEP_U3D_LIBRARY_UI_UIHelper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.UI.UIHelper obj = new EP.U3D.LIBRARY.UI.UIHelper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EP.U3D.LIBRARY.UI.UIHelper.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTransform(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Transform o = EP.U3D.LIBRARY.UI.UIHelper.GetTransform(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Transform o = EP.U3D.LIBRARY.UI.UIHelper.GetTransform(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.GetTransform");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetChildren(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Transform[] o = EP.U3D.LIBRARY.UI.UIHelper.GetChildren(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<bool>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				UnityEngine.Transform[] o = EP.U3D.LIBRARY.UI.UIHelper.GetChildren(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.Transform[] o = EP.U3D.LIBRARY.UI.UIHelper.GetChildren(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.Transform[] o = EP.U3D.LIBRARY.UI.UIHelper.GetChildren(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.GetChildren");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.SetPosition(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.SetPosition(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetPosition");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLocalPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.SetLocalPosition(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.SetLocalPosition(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetLocalPosition");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRotation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.SetRotation(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.SetRotation(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetRotation");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLocalRotation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.SetLocalRotation(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.SetLocalRotation(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetLocalRotation");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLocalScale(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.SetLocalScale(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.SetLocalScale(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetLocalScale");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetParent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
				UnityEngine.Transform o = EP.U3D.LIBRARY.UI.UIHelper.SetParent(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<bool>(L, 3))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				UnityEngine.Transform o = EP.U3D.LIBRARY.UI.UIHelper.SetParent(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string>(L, 3))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				UnityEngine.Transform o = EP.U3D.LIBRARY.UI.UIHelper.SetParent(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				UnityEngine.Transform o = EP.U3D.LIBRARY.UI.UIHelper.SetParent(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetParent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyGO(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				EP.U3D.LIBRARY.UI.UIHelper.DestroyGO(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<bool>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.DestroyGO(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.DestroyGO(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.DestroyGO(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.DestroyGO");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloneGO(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			UnityEngine.GameObject o = EP.U3D.LIBRARY.UI.UIHelper.CloneGO(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLayer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GameObject, int>(L, 1))
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.SetLayer(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Object, string>(L, 1))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.SetLayer(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.SetLayer(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetLayer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetActiveState(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.SetActiveState(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.SetActiveState(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetActiveState");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddChild(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				UnityEngine.GameObject o = EP.U3D.LIBRARY.UI.UIHelper.AddChild(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.GameObject o = EP.U3D.LIBRARY.UI.UIHelper.AddChild(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.AddChild");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnsureChild(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.EnsureChild(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.EnsureChild(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.GameObject arg3 = (UnityEngine.GameObject)ToLua.CheckObject(L, 4, typeof(UnityEngine.GameObject));
				EP.U3D.LIBRARY.UI.UIHelper.EnsureChild(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.EnsureChild");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EachChild(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
			EP.U3D.LIBRARY.UI.UIHelper.EachChildHandler arg1 = (EP.U3D.LIBRARY.UI.UIHelper.EachChildHandler)ToLua.CheckDelegate<EP.U3D.LIBRARY.UI.UIHelper.EachChildHandler>(L, 2);
			EP.U3D.LIBRARY.UI.UIHelper.EachChild(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowChild(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				EP.U3D.LIBRARY.UI.UIHelper.ShowChild(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				EP.U3D.LIBRARY.UI.UIHelper.EachChildHandler arg1 = (EP.U3D.LIBRARY.UI.UIHelper.EachChildHandler)ToLua.CheckDelegate<EP.U3D.LIBRARY.UI.UIHelper.EachChildHandler>(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.ShowChild(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.ShowChild");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideChild(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				EP.U3D.LIBRARY.UI.UIHelper.HideChild(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				EP.U3D.LIBRARY.UI.UIHelper.EachChildHandler arg1 = (EP.U3D.LIBRARY.UI.UIHelper.EachChildHandler)ToLua.CheckDelegate<EP.U3D.LIBRARY.UI.UIHelper.EachChildHandler>(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.HideChild(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.HideChild");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshObSort(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				EP.U3D.LIBRARY.UI.UIHelper.RefreshObSort(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.RefreshObSort(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.RefreshObSort");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponentInParent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentInParent(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, bool>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentInParent(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Type>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentInParent(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentInParent(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.GetComponentInParent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponent(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, bool>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponent(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Type>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponent(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponent(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.GetComponent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponentInChildren(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentInChildren(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, bool>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentInChildren(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Type>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentInChildren(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				object o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentInChildren(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.GetComponentInChildren");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponentsInParent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object[] o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentsInParent(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, bool>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				object[] o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentsInParent(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Type>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				object[] o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentsInParent(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				object[] o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentsInParent(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.GetComponentsInParent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponents(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object[] o = EP.U3D.LIBRARY.UI.UIHelper.GetComponents(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				object[] o = EP.U3D.LIBRARY.UI.UIHelper.GetComponents(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.GetComponents");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponentsInChildren(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object[] o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentsInChildren(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, bool>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				object[] o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentsInChildren(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Type>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				object[] o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentsInChildren(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				object[] o = EP.U3D.LIBRARY.UI.UIHelper.GetComponentsInChildren(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.GetComponentsInChildren");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddComponent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				object o = EP.U3D.LIBRARY.UI.UIHelper.AddComponent(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				object o = EP.U3D.LIBRARY.UI.UIHelper.AddComponent(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.AddComponent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveComponent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.RemoveComponent(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, bool>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.RemoveComponent(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Type>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.RemoveComponent(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				EP.U3D.LIBRARY.UI.UIHelper.RemoveComponent(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.RemoveComponent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetComponentEnabled(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				object o = EP.U3D.LIBRARY.UI.UIHelper.SetComponentEnabled(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				object o = EP.U3D.LIBRARY.UI.UIHelper.SetComponentEnabled(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetComponentEnabled");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGraphicAlpha(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.UI.Graphic o = EP.U3D.LIBRARY.UI.UIHelper.SetGraphicAlpha(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.UI.Graphic o = EP.U3D.LIBRARY.UI.UIHelper.SetGraphicAlpha(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetGraphicAlpha");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetButtonEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				System.Action<UnityEngine.GameObject> arg1 = (System.Action<UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<UnityEngine.GameObject>>(L, 2);
				UnityEngine.UI.Button o = EP.U3D.LIBRARY.UI.UIHelper.SetButtonEvent(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Action<UnityEngine.GameObject> arg2 = (System.Action<UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<UnityEngine.GameObject>>(L, 3);
				UnityEngine.UI.Button o = EP.U3D.LIBRARY.UI.UIHelper.SetButtonEvent(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetButtonEvent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEventEnabled(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				EP.U3D.LIBRARY.UI.UIHelper.SetEventEnabled(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				EP.U3D.LIBRARY.UI.UIHelper.SetEventEnabled(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetEventEnabled");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLabelText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				UnityEngine.UI.Text o = EP.U3D.LIBRARY.UI.UIHelper.SetLabelText(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				UnityEngine.UI.Text o = EP.U3D.LIBRARY.UI.UIHelper.SetLabelText(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetLabelText");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMeshProText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				TMPro.TextMeshProUGUI o = EP.U3D.LIBRARY.UI.UIHelper.SetMeshProText(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				TMPro.TextMeshProUGUI o = EP.U3D.LIBRARY.UI.UIHelper.SetMeshProText(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetMeshProText");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSpriteName(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.UI.Image o = EP.U3D.LIBRARY.UI.UIHelper.SetSpriteName(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				UnityEngine.UI.Image o = EP.U3D.LIBRARY.UI.UIHelper.SetSpriteName(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				UnityEngine.UI.Atlas arg3 = (UnityEngine.UI.Atlas)ToLua.CheckObject<UnityEngine.UI.Atlas>(L, 4);
				UnityEngine.UI.Image o = EP.U3D.LIBRARY.UI.UIHelper.SetSpriteName(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetSpriteName");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSpriteRes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.UI.Image o = EP.U3D.LIBRARY.UI.UIHelper.SetSpriteRes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				UnityEngine.UI.Image o = EP.U3D.LIBRARY.UI.UIHelper.SetSpriteRes(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetSpriteRes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSpriteAlpha(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.UI.Image o = EP.U3D.LIBRARY.UI.UIHelper.SetSpriteAlpha(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.UI.Image o = EP.U3D.LIBRARY.UI.UIHelper.SetSpriteAlpha(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetSpriteAlpha");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRawImage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.UI.RawImage o = EP.U3D.LIBRARY.UI.UIHelper.SetRawImage(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<bool>(L, 3))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				UnityEngine.UI.RawImage o = EP.U3D.LIBRARY.UI.UIHelper.SetRawImage(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string>(L, 3))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				UnityEngine.UI.RawImage o = EP.U3D.LIBRARY.UI.UIHelper.SetRawImage(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				UnityEngine.UI.RawImage o = EP.U3D.LIBRARY.UI.UIHelper.SetRawImage(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.UI.UIHelper.SetRawImage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Texture2D o = EP.U3D.LIBRARY.UI.UIHelper.GetTexture(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WWWTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			EP.U3D.LIBRARY.UI.UIHelper.WWWTexture(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EP_U3D_LIBRARY_UI_UIHelper_EachChildHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<EP.U3D.LIBRARY.UI.UIHelper.EachChildHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<EP.U3D.LIBRARY.UI.UIHelper.EachChildHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

