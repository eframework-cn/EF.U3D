//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EP_U3D_LIBRARY_BASE_HelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EP.U3D.LIBRARY.BASE.Helper), typeof(System.Object));
		L.RegFunction("StringFormat", StringFormat);
		L.RegFunction("VersionToNumber", VersionToNumber);
		L.RegFunction("NumberToVersion", NumberToVersion);
		L.RegFunction("StrToVec3", StrToVec3);
		L.RegFunction("Vec3ToStr", Vec3ToStr);
		L.RegFunction("StrToVec4", StrToVec4);
		L.RegFunction("Vec4ToStr", Vec4ToStr);
		L.RegFunction("ColorToHex", ColorToHex);
		L.RegFunction("HexToColor", HexToColor);
		L.RegFunction("OmitStr", OmitStr);
		L.RegFunction("Log", Log);
		L.RegFunction("LogWarning", LogWarning);
		L.RegFunction("LogError", LogError);
		L.RegFunction("LogException", LogException);
		L.RegFunction("FileSize", FileSize);
		L.RegFunction("HasFile", HasFile);
		L.RegFunction("OpenText", OpenText);
		L.RegFunction("OpenFile", OpenFile);
		L.RegFunction("SaveText", SaveText);
		L.RegFunction("SaveFile", SaveFile);
		L.RegFunction("DeleteFile", DeleteFile);
		L.RegFunction("CopyFile", CopyFile);
		L.RegFunction("HasDirectory", HasDirectory);
		L.RegFunction("DeleteDirectory", DeleteDirectory);
		L.RegFunction("CreateDirectory", CreateDirectory);
		L.RegFunction("CopyDirectory", CopyDirectory);
		L.RegFunction("IsDirectory", IsDirectory);
		L.RegFunction("NormalizePath", NormalizePath);
		L.RegFunction("FileMD5", FileMD5);
		L.RegFunction("StrMD5", StrMD5);
		L.RegFunction("BytesMD5", BytesMD5);
		L.RegFunction("EncryptString", EncryptString);
		L.RegFunction("DecryptString", DecryptString);
		L.RegFunction("EncryptBytes", EncryptBytes);
		L.RegFunction("DecryptBytes", DecryptBytes);
		L.RegFunction("GetTimestamp", GetTimestamp);
		L.RegFunction("GetMillisecond", GetMillisecond);
		L.RegFunction("NowTime", NowTime);
		L.RegFunction("ToTime", ToTime);
		L.RegFunction("TimeToZero", TimeToZero);
		L.RegFunction("ZeroTime", ZeroTime);
		L.RegFunction("TimeFormat", TimeFormat);
		L.RegFunction("Zip", Zip);
		L.RegFunction("Unzip", Unzip);
		L.RegFunction("New", _CreateEP_U3D_LIBRARY_BASE_Helper);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("TIME_SEC_1", 1);
		L.RegConstant("TIME_SEC_2", 2);
		L.RegConstant("TIME_SEC_3", 3);
		L.RegConstant("TIME_SEC_4", 4);
		L.RegConstant("TIME_SEC_5", 5);
		L.RegConstant("TIME_SEC_6", 6);
		L.RegConstant("TIME_SEC_7", 7);
		L.RegConstant("TIME_SEC_8", 8);
		L.RegConstant("TIME_SEC_9", 9);
		L.RegConstant("TIME_SEC_10", 10);
		L.RegConstant("TIME_SEC_15", 15);
		L.RegConstant("TIME_SEC_20", 20);
		L.RegConstant("TIME_SEC_25", 25);
		L.RegConstant("TIME_SEC_30", 30);
		L.RegConstant("TIME_SEC_35", 35);
		L.RegConstant("TIME_SEC_40", 40);
		L.RegConstant("TIME_SEC_45", 45);
		L.RegConstant("TIME_SEC_50", 50);
		L.RegConstant("TIME_SEC_55", 55);
		L.RegConstant("TIME_MIN_1", 60);
		L.RegConstant("TIME_MIN_2", 120);
		L.RegConstant("TIME_MIN_3", 180);
		L.RegConstant("TIME_MIN_4", 240);
		L.RegConstant("TIME_MIN_5", 300);
		L.RegConstant("TIME_MIN_6", 360);
		L.RegConstant("TIME_MIN_7", 420);
		L.RegConstant("TIME_MIN_8", 480);
		L.RegConstant("TIME_MIN_9", 540);
		L.RegConstant("TIME_MIN_10", 600);
		L.RegConstant("TIME_MIN_12", 720);
		L.RegConstant("TIME_MIN_15", 900);
		L.RegConstant("TIME_MIN_20", 1200);
		L.RegConstant("TIME_MIN_25", 1500);
		L.RegConstant("TIME_MIN_30", 1800);
		L.RegConstant("TIME_MIN_35", 2100);
		L.RegConstant("TIME_MIN_40", 2400);
		L.RegConstant("TIME_MIN_45", 2700);
		L.RegConstant("TIME_MIN_50", 3000);
		L.RegConstant("TIME_MIN_55", 3300);
		L.RegConstant("TIME_HOUR_1", 3600);
		L.RegConstant("TIME_HOUR_2", 7200);
		L.RegConstant("TIME_HOUR_3", 10800);
		L.RegConstant("TIME_HOUR_4", 14400);
		L.RegConstant("TIME_HOUR_5", 18000);
		L.RegConstant("TIME_HOUR_6", 21600);
		L.RegConstant("TIME_HOUR_7", 25200);
		L.RegConstant("TIME_HOUR_8", 28800);
		L.RegConstant("TIME_HOUR_9", 32400);
		L.RegConstant("TIME_HOUR_10", 36000);
		L.RegConstant("TIME_HOUR_11", 39600);
		L.RegConstant("TIME_HOUR_12", 43200);
		L.RegConstant("TIME_HOUR_13", 46800);
		L.RegConstant("TIME_HOUR_14", 50400);
		L.RegConstant("TIME_HOUR_15", 54000);
		L.RegConstant("TIME_HOUR_16", 57600);
		L.RegConstant("TIME_HOUR_17", 61200);
		L.RegConstant("TIME_HOUR_18", 64800);
		L.RegConstant("TIME_HOUR_19", 68400);
		L.RegConstant("TIME_HOUR_20", 72000);
		L.RegConstant("TIME_HOUR_21", 75600);
		L.RegConstant("TIME_HOUR_22", 79200);
		L.RegConstant("TIME_HOUR_23", 82800);
		L.RegConstant("TIME_DAY_1", 86400);
		L.RegConstant("TIME_DAY_2", 172800);
		L.RegConstant("TIME_DAY_3", 259200);
		L.RegConstant("TIME_DAY_4", 345600);
		L.RegConstant("TIME_DAY_5", 432000);
		L.RegConstant("TIME_DAY_6", 518400);
		L.RegConstant("TIME_DAY_7", 604800);
		L.RegConstant("TIME_DAY_8", 691200);
		L.RegConstant("TIME_DAY_9", 777600);
		L.RegConstant("TIME_DAY_10", 864000);
		L.RegConstant("TIME_DAY_15", 1296000);
		L.RegConstant("TIME_DAY_20", 1728000);
		L.RegConstant("TIME_DAY_30", 2592000);
		L.RegVar("TIME_INITIAL", get_TIME_INITIAL, set_TIME_INITIAL);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEP_U3D_LIBRARY_BASE_Helper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EP.U3D.LIBRARY.BASE.Helper obj = new EP.U3D.LIBRARY.BASE.Helper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EP.U3D.LIBRARY.BASE.Helper.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StringFormat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
			string o = EP.U3D.LIBRARY.BASE.Helper.StringFormat(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VersionToNumber(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			long o = EP.U3D.LIBRARY.BASE.Helper.VersionToNumber(arg0);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NumberToVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			string o = EP.U3D.LIBRARY.BASE.Helper.NumberToVersion(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StrToVec3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Vector3 o = EP.U3D.LIBRARY.BASE.Helper.StrToVec3(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Vec3ToStr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			string o = EP.U3D.LIBRARY.BASE.Helper.Vec3ToStr(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StrToVec4(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Vector4 o = EP.U3D.LIBRARY.BASE.Helper.StrToVec4(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Vec4ToStr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Vector4 arg0 = ToLua.ToVector4(L, 1);
			string o = EP.U3D.LIBRARY.BASE.Helper.Vec4ToStr(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColorToHex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
			string o = EP.U3D.LIBRARY.BASE.Helper.ColorToHex(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HexToColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Color o = EP.U3D.LIBRARY.BASE.Helper.HexToColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OmitStr(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string o = EP.U3D.LIBRARY.BASE.Helper.OmitStr(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string o = EP.U3D.LIBRARY.BASE.Helper.OmitStr(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string o = EP.U3D.LIBRARY.BASE.Helper.OmitStr(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.OmitStr");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Log(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			object arg0 = ToLua.ToVarObject(L, 1);
			object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
			EP.U3D.LIBRARY.BASE.Helper.Log(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogWarning(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			object arg0 = ToLua.ToVarObject(L, 1);
			object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
			EP.U3D.LIBRARY.BASE.Helper.LogWarning(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogError(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			object arg0 = ToLua.ToVarObject(L, 1);
			object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
			EP.U3D.LIBRARY.BASE.Helper.LogError(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogException(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Exception arg0 = (System.Exception)ToLua.CheckObject<System.Exception>(L, 1);
				EP.U3D.LIBRARY.BASE.Helper.LogException(arg0);
				return 0;
			}
			else if (count == 2)
			{
				System.Exception arg0 = (System.Exception)ToLua.CheckObject<System.Exception>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				EP.U3D.LIBRARY.BASE.Helper.LogException(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.LogException");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FileSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			int o = EP.U3D.LIBRARY.BASE.Helper.FileSize(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = EP.U3D.LIBRARY.BASE.Helper.HasFile(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = EP.U3D.LIBRARY.BASE.Helper.OpenText(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			byte[] o = EP.U3D.LIBRARY.BASE.Helper.OpenFile(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool o = EP.U3D.LIBRARY.BASE.Helper.SaveText(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.IO.FileMode arg2 = (System.IO.FileMode)ToLua.CheckObject(L, 3, typeof(System.IO.FileMode));
				bool o = EP.U3D.LIBRARY.BASE.Helper.SaveText(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.SaveText");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				bool o = EP.U3D.LIBRARY.BASE.Helper.SaveFile(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				System.IO.FileMode arg2 = (System.IO.FileMode)ToLua.CheckObject(L, 3, typeof(System.IO.FileMode));
				bool o = EP.U3D.LIBRARY.BASE.Helper.SaveFile(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.SaveFile");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			EP.U3D.LIBRARY.BASE.Helper.DeleteFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				EP.U3D.LIBRARY.BASE.Helper.CopyFile(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				EP.U3D.LIBRARY.BASE.Helper.CopyFile(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.CopyFile");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasDirectory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = EP.U3D.LIBRARY.BASE.Helper.HasDirectory(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteDirectory(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool o = EP.U3D.LIBRARY.BASE.Helper.DeleteDirectory(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool o = EP.U3D.LIBRARY.BASE.Helper.DeleteDirectory(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.DeleteDirectory");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateDirectory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			EP.U3D.LIBRARY.BASE.Helper.CreateDirectory(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyDirectory(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string[] arg2 = ToLua.CheckParamsString(L, 3, count - 2);
			EP.U3D.LIBRARY.BASE.Helper.CopyDirectory(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDirectory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = EP.U3D.LIBRARY.BASE.Helper.IsDirectory(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NormalizePath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = EP.U3D.LIBRARY.BASE.Helper.NormalizePath(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FileMD5(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = EP.U3D.LIBRARY.BASE.Helper.FileMD5(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StrMD5(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = EP.U3D.LIBRARY.BASE.Helper.StrMD5(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BytesMD5(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			string o = EP.U3D.LIBRARY.BASE.Helper.BytesMD5(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncryptString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string o = EP.U3D.LIBRARY.BASE.Helper.EncryptString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string o = EP.U3D.LIBRARY.BASE.Helper.EncryptString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.EncryptString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecryptString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string o = EP.U3D.LIBRARY.BASE.Helper.DecryptString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string o = EP.U3D.LIBRARY.BASE.Helper.DecryptString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.DecryptString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncryptBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				byte[] o = EP.U3D.LIBRARY.BASE.Helper.EncryptBytes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				byte[] o = EP.U3D.LIBRARY.BASE.Helper.EncryptBytes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.EncryptBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecryptBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				byte[] o = EP.U3D.LIBRARY.BASE.Helper.DecryptBytes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				byte[] o = EP.U3D.LIBRARY.BASE.Helper.DecryptBytes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.DecryptBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTimestamp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = EP.U3D.LIBRARY.BASE.Helper.GetTimestamp();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMillisecond(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			long o = EP.U3D.LIBRARY.BASE.Helper.GetMillisecond();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NowTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.DateTime o = EP.U3D.LIBRARY.BASE.Helper.NowTime();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			System.DateTime o = EP.U3D.LIBRARY.BASE.Helper.ToTime(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TimeToZero(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				int o = EP.U3D.LIBRARY.BASE.Helper.TimeToZero();
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int o = EP.U3D.LIBRARY.BASE.Helper.TimeToZero(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.TimeToZero");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ZeroTime(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				int o = EP.U3D.LIBRARY.BASE.Helper.ZeroTime();
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int o = EP.U3D.LIBRARY.BASE.Helper.ZeroTime(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.ZeroTime");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TimeFormat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				string o = EP.U3D.LIBRARY.BASE.Helper.TimeFormat(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				string o = EP.U3D.LIBRARY.BASE.Helper.TimeFormat(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				string o = EP.U3D.LIBRARY.BASE.Helper.TimeFormat(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int, string>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string o = EP.U3D.LIBRARY.BASE.Helper.TimeFormat(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long, string>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string o = EP.U3D.LIBRARY.BASE.Helper.TimeFormat(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.DateTime, string>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string o = EP.U3D.LIBRARY.BASE.Helper.TimeFormat(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.TimeFormat");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Zip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool o = EP.U3D.LIBRARY.BASE.Helper.Zip(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Collections.Generic.List<string> arg2 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<string>));
				bool o = EP.U3D.LIBRARY.BASE.Helper.Zip(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.Zip");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unzip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				EP.U3D.LIBRARY.BASE.Helper.Unzip(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				EP.U3D.LIBRARY.BASE.Helper.Unzip(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				System.Action<string> arg3 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 4);
				EP.U3D.LIBRARY.BASE.Helper.Unzip(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				System.Action<string> arg3 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 4);
				System.Action<float> arg4 = (System.Action<float>)ToLua.CheckDelegate<System.Action<float>>(L, 5);
				EP.U3D.LIBRARY.BASE.Helper.Unzip(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: EP.U3D.LIBRARY.BASE.Helper.Unzip");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TIME_INITIAL(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, EP.U3D.LIBRARY.BASE.Helper.TIME_INITIAL);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TIME_INITIAL(IntPtr L)
	{
		try
		{
			System.DateTime arg0 = StackTraits<System.DateTime>.Check(L, 2);
			EP.U3D.LIBRARY.BASE.Helper.TIME_INITIAL = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

